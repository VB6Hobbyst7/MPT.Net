Option Explicit On
Option Strict On

'Imports System.ComponentModel
'Imports System.Collections.ObjectModel

'Imports CSiTester.cEnumerations

'Imports CSiTester.cLibFilesXML
'Imports CSiTester.cLibStringConversion

''' <summary>
''' Class used for autogenerating model control XML files.
''' </summary>
''' <remarks></remarks>
Public Class cXMLGenerator
    'Implements INotifyPropertyChanged
    'Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    '#Region "Variables"
    '    ' ''' <summary>
    '    ' ''' If true, the current model file already has a control XML file.
    '    ' ''' </summary>
    '    ' ''' <remarks></remarks>
    '    'Private _currentModelHasXMLFile As Boolean
    '    ' ''' <summary>
    '    ' ''' Shared name of a current example for a multi-model example. e.g. "Example 10a", this would be "Example 10".
    '    ' ''' </summary>
    '    ' ''' <remarks></remarks>
    '    'Private _currentMultiModelGroupName As String
    '    ' ''' <summary>
    '    ' ''' In cases where a group id starts with 0 (e.g. 5.0), this flag is used to avoid double counting the first model of a group (e.g. 5.1).
    '    ' ''' </summary>
    '    ' ''' <remarks></remarks>
    '    'Private _isFirstGroupNameWithZero As Boolean
    '#End Region

    '#Region "Properties"
    '    ' ''' <summary>
    '    ' ''' List of paths to the model control XML files in the source folder.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property modelXMLPaths As New List(Of String)
    '    ' ''' <summary>
    '    ' ''' List of paths to the model files that have corresponding model control XML files.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property modelWithXMLPaths As New List(Of String)
    '    ' ''' <summary>
    '    ' ''' Latest paths for each model control file that has been affected by this class in an operation. Currently only used when generating MC XML files.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property mcModelXMLPathsNew As New List(Of String)

    '    ' ''' <summary>
    '    ' ''' Directory location from which the model control XML files will be generated, based on the associated model files in the source.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property folderSource As String
    '    ' ''' <summary>
    '    ' ''' File extension by which files are filtered for selecting which files to associate with a model control XML.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property fileExtension As String
    '    ' ''' <summary>
    '    ' ''' Starting ID to use in auto-generating unique model ID numbers associated with the examples.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property startingModelID As String
    '    ' ''' <summary>
    '    ' ''' ID numbers to be skipped when auto-generating unique model ID numbers associated with the examples.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property skippedModelIDsList As New List(Of String)

    '    ' ''' <summary>
    '    ' ''' Setting as to whether or not all models are part of one example, multimodel examples should be generated automatically based on file name, 
    '    ' ''' or all examples are to be treated as full and separate examples.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Public Property multiModelMethod As eMultiModelIDNumbering
    '    ' ''' <summary>
    '    ' ''' If true, the a secondary ID will be autogenerated based on the model file name. False, the secondary ID will be assigned a value provided by the user, if any.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property secondaryIDSameAsModel As Boolean
    '    ' ''' <summary>
    '    ' ''' If true, the model file name will be renamed as the model ID. If false, the model name will be synced with the secondary ID.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property syncModelNameWithModelID As Boolean
    '    ' ''' <summary>
    '    ' ''' If true, only the model control XML file will be renamed to be in sync with the ID or secondary ID.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property renameXMLOnly As Boolean
    '    ' ''' <summary>
    '    ' ''' Path to the model file, relative to the model control XML file.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property modelPath As String
    '    ' ''' <summary>
    '    ' ''' Classification of the example primarily demonstrating confirmation of analysis, design, or both.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property exampleType As String
    '    ' ''' <summary>
    '    ' ''' Groupings of analysis example types by element, such as 'frame', 'shell', etc.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property analysisClass As String
    '    ' ''' <summary>
    '    ' ''' Analysis cases tested in the example, such as 'Time History'.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property analysisTypes As New ObservableCollection(Of String)    'TODO: Not initialized. Not used yet
    '    ' ''' <summary>
    '    ' ''' Element type tested in the example, such as 'Link' or 'Hinge'.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property elementTypes As New ObservableCollection(Of String)    'TODO: Not initialized. Not used yet
    '    ' ''' <summary>
    '    ' ''' Overall region within which a particular code is used.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property codeRegion As String
    '    ' ''' <summary>
    '    ' ''' Groupings of design example types, such as 'Bending Member' or 'Axial Section'.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property designClass As String
    '    ' ''' <summary>
    '    ' ''' Design types tested in the example, such as 'Steel Frame' or 'Shear Wall'. 
    '    ' ''' Needed for instructing the program to run the design. 
    '    ' ''' Most entries are generated based on if command line parameters allow the design to be called. 
    '    ' ''' Order of list is fixed.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property designType As String
    '    ' ''' <summary>
    '    ' ''' List of keywords to add to the example.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property addKeywordList As New ObservableCollection(Of String)
    '    'Private _myMCModel As New cMCModel
    '    ' ''' <summary>
    '    ' ''' Class representing the model control XML file to be generated.
    '    ' ''' </summary>
    '    ' ''' <value></value>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Friend Property myMCModel As cMCModel
    '    '    Set(ByVal value As cMCModel)
    '    '        _myMCModel = value
    '    '        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("myMCModel"))
    '    '    End Set
    '    '    Get
    '    '        Return _myMCModel
    '    '    End Get
    '    'End Property

    '    ''' <summary>
    '    ''' Class that contains paths to all selected model files to be edited. 
    '    ''' From older class, also contains all files and directories within a specified directory, as well as a list of paths filtered by file extension.
    '    ''' </summary>
    '    ''' <value></value>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Property oFilePaths As New cPathsExamples

    '    Private _folderStructure As eFolderStructure
    '    ''' <summary>
    '    ''' The folder structure to which the generated examples will be be organized.
    '    ''' </summary>
    '    ''' <value></value>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Friend Property folderStructure As eFolderStructure
    '        Set(ByVal value As eFolderStructure)
    '            If Not _folderStructure = value Then
    '                _folderStructure = value
    '                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("folderStructure"))
    '            End If
    '        End Set
    '        Get
    '            Return _folderStructure
    '        End Get
    '    End Property
    '#End Region
    '#Region "Methods: Friend"
    '    ' TODO: Phase out
    '    ' ''' <summary>
    '    ' ''' Creates a set of Model Control objects based on the template information of the current class.
    '    ' ''' </summary>
    '    ' ''' <remarks></remarks>
    '    'Friend Function CreateTemplateMCObjects() As ObservableCollection(Of cMCModel)
    '    '    Dim models As New ObservableCollection(Of cMCModel)

    '    '    Try
    '    '        ''Sets starting id as that provided, with prefix zeros added
    '    '        'Dim currentModelID As String = ModelGroupID(CStr(myCDbl(startingModelID) - 1))
    '    '        'Dim firstModel As Boolean = True

    '    '        ''Add additional model IDs to skip
    '    '        'UpdateSkippedModelIDsList()

    '    '        For Each pathSelected As cPathExample In oFilePaths.pathsSelected
    '    '            Dim modelName As String = GetPathFileName(pathSelected.fileName, True)
    '    '            '    Dim currentMultiModelType As eMultiModelType = MultiModelType(modelName, firstModel)

    '    '            '    'Determines Multimodel keyword in myMCModel
    '    '            '    UpdateMultiModelGroupName(modelName, currentMultiModelType)
    '    '            '    UpdateKeyWordsMultiModel(currentMultiModelType)

    '    '            '    currentModelID = IncrementModelIDs(currentModelID, currentMultiModelType)

    '    '            '    'Update other properties
    '    '            With myMCModel
    '    '                '        '.modelID.IdAsString = currentModelID
    '    '                '.folderStructure = folderStructure
    '    '                '.syncModelNameWithModelID = syncModelNameWithModelID
    '    '                '.modelFile.AsModelFile.SetProperties(pathSelected.path)   'Currently set as file path as unique key to reference against file path objects.
    '    '                ' If secondaryIDSameAsModel Then .secondaryID = modelName

    '    '                '.mcFile.pathDestination.SetProperties(XMLFileNamePath(pathSelected.path, .modelID.IdAsString, .secondaryID))

    '    '            End With

    '    '            '    models.Add(CType(myMCModel.Clone, cMCModel))

    '    '            '    firstModel = False
    '    '        Next
    '    '    Catch ex As Exception
    '    '        csiLogger.ExceptionAction(ex)
    '    '    End Try

    '    '    Return models
    '    'End Function
    '    ' ''' <summary>
    '    ' ''' Creates a set of Model Control XML files for the model objects provided, populated with specified values, and placed in a specified folder structure.
    '    ' ''' </summary>
    '    ' ''' <param name="p_modelsCreate">Dictionary of paths to the original model files and their corresponding model objects to create examples for.</param>
    '    ' ''' <param name="p_folderStructure">Overwrites the value used by the class.</param>
    '    ' ''' <remarks></remarks>
    '    'Friend Function WriteExamples(ByVal p_modelsCreate As Dictionary(Of String, cMCModel),
    '    '                              Optional ByVal p_folderStructure As eFolderStructure = eFolderStructure.NotSpecified) As Boolean
    '    '    Try
    '    '        Dim pathIndex As Integer = 0
    '    '        mcModelXMLPathsNew.Clear()

    '    '        For Each kvp As KeyValuePair(Of String, cMCModel) In p_modelsCreate
    '    '            Dim modelPathSource As String = kvp.Key
    '    '            Dim model As cMCModel = kvp.Value

    '    '            If CreateNewExample(model, modelPathSource) Then
    '    '                With model
    '    '                    .mcFile.pathDestination.SetProperties(_newXMLPath)
    '    '                    .UpdateModelPath()
    '    '                End With
    '    '            End If

    '    '            pathIndex += 1
    '    '        Next
    '    '    Catch ex As Exception
    '    '        csiLogger.ExceptionAction(ex)
    '    '        Return False
    '    '    End Try

    '    '    Return True
    '    'End Function
    '#Region "Methods: Private"
    '    ' ''' <summary>
    '    ' ''' Creates and organizes a new Set of files that together compose a testing example.
    '    ' ''' </summary>
    '    ' ''' <param name="p_mcModel">Model Control object that contains the data to write to an XML file.</param>
    '    ' ''' <param name="p_modelPathSource">Original path of the model file.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Function CreateNewExample(ByVal p_mcModel As cMCModel,
    '    '                                  ByVal p_modelPathSource As String) As Boolean
    '    '    'Create XML File
    '    '    'If CreateNewMCXML(p_mcModel) Then

    '    '    'Sync Model File name
    '    '    'If Not renameXMLOnly Then p_mcModel.SyncModelFileName()
    '    '    'Dim modelFileName As String = GetSyncedModelFileNames(p_mcModel)
    '    '    myXMLEditor.RenameModelFiles(p_mcModel.mcFile.pathDestination, modelFileName, False)

    '    '    'Update Files Location
    '    '    If OrganizeExampleFiles(modelFileName, p_modelPathSource, p_mcModel.mcFile.pathDestination, p_mcModel.folderStructure) Then
    '    '        Return True
    '    '    End If
    '    '    'End If

    '    '    Return False
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Create a new named and populated model control file at the specified location.
    '    ' ''' </summary>
    '    ' ''' <param name="p_mcModel">Model control object to used for populating data into the XML file.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Function CreateNewMCXML(ByVal p_mcModel As cMCModel) As Boolean
    '    '    'CopyFile(cMCModel.seedPath, p_mcModel.xmlPath, False, True)

    '    '    'If p_mcModel.SaveXMLFile() Then
    '    '    '    Return True
    '    '    'Else
    '    '    '    Return False
    '    '    'End If
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' If model files are to be synced with the model ID or secondary model ID, change the file name and corresponding XML references accordingly.
    '    ' ''' </summary>
    '    ' ''' <param name="p_mcModel">Model control object to used for populating data into the XML file.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Function GetSyncedModelFileNames(ByVal p_mcModel As cMCModel) As String
    '    '    'Dim modelFileName As String

    '    '    'If Not renameXMLOnly Then
    '    '    '    If (Not syncModelNameWithModelID AndAlso Not String.IsNullOrEmpty(p_mcModel.secondaryID)) Then
    '    '    '        modelFileName = p_mcModel.secondaryID
    '    '    '    Else
    '    '    '        modelFileName = p_mcModel.modelID
    '    '    '    End If
    '    '    'Else
    '    '    '    modelFileName = GetPathFileName(p_mcModel.path, True)
    '    '    'End If

    '    '    'Return modelFileName
    '    'End Function
    '    ''TODO: Add this to the cMCModels class
    '    ' ''' <summary>
    '    ' ''' Adds additional model IDs to skip based on IDs listed in existing XML files.
    '    ' ''' </summary>
    '    ' ''' <remarks></remarks>
    '    'Private Sub UpdateSkippedModelIDsList()
    '    '    Dim tempModelID As String = ""

    '    '    For Each modelXMLPath As String In modelXMLPaths
    '    '        'Add any existing model ID to the list of IDs to stkip
    '    '        GetSingleXMLNodeValue(modelXMLPath, "//n:model/n:id", tempModelID)
    '    '        skippedModelIDsList.Add(CStr(Math.Floor(myCDbl(tempModelID))))
    '    '    Next
    '    '    skippedModelIDsList.Sort()
    '    'End Sub

    '    ' ''' <summary>
    '    ' ''' Sets the name and path of the model control XML file to be created. Returns the path of the new XML file, including the filename.
    '    ' ''' </summary>
    '    ' ''' <param name="p_filePath">Filepath to the model file to which the XML file will correspond.</param>
    '    ' ''' <param name="p_currentModelID">Model of the model file example.</param>
    '    ' ''' <param name="p_secondaryID">Name of the secondary id, which is usually the name of the model file to which the XML file will correspond.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function XMLFileNamePath(ByVal p_filePath As String,
    '    '                                 ByVal p_currentModelID As String,
    '    '                                 ByVal p_secondaryID As String) As String
    '    '    Dim pathStub As String = FilterStringFromName(p_filePath, GetSuffix(p_filePath, "\"), True, False)

    '    '    Dim newXMLName As String = p_currentModelID
    '    '    If (Not syncModelNameWithModelID AndAlso
    '    '        Not String.IsNullOrEmpty(p_secondaryID)) Then

    '    '        newXMLName = p_secondaryID
    '    '    End If

    '    '    XMLFileNamePath = pathStub & newXMLName & cPathModelControlFile.FILE_NAME_SUFFIX_MC_XML
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Generates the next model ID to be used, accounting for model IDs set to be skipped. 
    '    ' ''' Increments the integer portion and loses any decimal places.
    '    ' ''' </summary>
    '    ' ''' <param name="p_currentModelID">Current model ID to be incremented.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Function IncrementModelGroupIDs(ByRef p_currentModelID As String) As String
    '    '    Dim groupIDStub As String = GetPrefix(p_currentModelID, ".")

    '    '    'Generate Next Model ID
    '    '    groupIDStub = CStr(CDbl(groupIDStub) + 1)     'Increment Number

    '    '    'Check if model ID is specified to be skipped & if so, repeat incrementing (compared list assumed to be sorted)
    '    '    For Each skipModelID As String In skippedModelIDsList
    '    '        If skipModelID = groupIDStub Then groupIDStub = CStr(CDbl(groupIDStub) + 1) 'Increment Number
    '    '    Next

    '    '    Return ModelGroupID(groupIDStub)
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Generates the next model Sub-ID to be used, leaving the group ID intact. Also increments group ID if starting a new group.
    '    ' ''' </summary>
    '    ' ''' <param name="p_currentModelID">Current model ID to be incremented.</param>
    '    ' ''' <param name="p_isNewMultiModel">If 'True', model is the first model of a new group set.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Function IncrementModelSubIDs(ByVal p_currentModelID As String,
    '    '                                        ByVal p_isNewMultiModel As Boolean) As String
    '    '    Dim subIDLength As Integer = testerSettings.modelSubIDIntegerLength
    '    '    Dim subIDStub As Integer
    '    '    Dim subIDStubString As String

    '    '    'Check if this is the first Sub ID in the count for a group
    '    '    If p_isNewMultiModel Then
    '    '        p_currentModelID = IncrementModelGroupIDs(p_currentModelID)                      'Increments group ID 
    '    '        subIDStubString = "1"                                                       'Assign first Sub ID number
    '    '    Else
    '    '        subIDStub = myCInt(GetSuffix(p_currentModelID, "."))

    '    '        'If counter has not yet appended sub-ids, adjust here to start from 1.
    '    '        If subIDStub = CDbl(p_currentModelID) Then subIDStub = 0

    '    '        'Generate Next Model Sub ID
    '    '        subIDStubString = CStr(subIDStub + 1)                                       'Increment Sub ID Number
    '    '    End If

    '    '    'Add prefix zeros to Sub ID
    '    '    While Len(subIDStubString) < subIDLength
    '    '        subIDStubString = "0" & subIDStubString
    '    '    End While

    '    '    'Append model group ID to new Sub ID
    '    '    Return ModelGroupID(p_currentModelID) & "." & subIDStubString
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Gets the integer portion of the model id as a string, with the appropriate number of preceding "zeros".
    '    ' ''' </summary>
    '    ' ''' <param name="p_currentModelID">Current model ID to be incremented.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function ModelGroupID(ByVal p_currentModelID As String) As String
    '    '    Dim modelIDLength As Integer = testerSettings.modelIDIntegerLength
    '    '    Dim groupIDStub As String = GetPrefix(p_currentModelID, ".")

    '    '    While Len(groupIDStub) < modelIDLength           'Add prefix zeros to ID
    '    '        groupIDStub = "0" & groupIDStub
    '    '    End While

    '    '    ModelGroupID = groupIDStub
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Determines which enumeration type the example/model is based on user specifications and model file name.
    '    ' ''' For working with groups.
    '    ' ''' </summary>
    '    ' ''' <param name="p_modelName">Name of the model file.</param>
    '    ' ''' <param name="p_firstModel">If 'True', then this is the first model being considered out of a series.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function MultiModelType(ByVal p_modelName As String,
    '    '                                   ByVal p_firstModel As Boolean) As eMultiModelType
    '    '    'TODO: Work in integration. Currently 'Else' is handled in cMCModelID
    '    '    If IsMultiModelSpecified() Then
    '    '        If p_firstModel Then
    '    '            Return eMultiModelType.starting
    '    '        Else
    '    '            Return eMultiModelType.continuing
    '    '        End If
    '    '    Else
    '    '        If IsMultiModelOfCurrentGroup(p_modelName, _currentMultiModelGroupName) Then
    '    '            Return eMultiModelType.continuing
    '    '        ElseIf IsStartingMultiModel(p_modelName) Then
    '    '            Return eMultiModelType.starting
    '    '        Else
    '    '            Return eMultiModelType.singleModel
    '    '        End If
    '    '    End If
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Changes the current model group name stored in the class to reflect the existing model being considered.
    '    ' ''' </summary>
    '    ' ''' <param name="p_modelName">Name of the model file.</param>
    '    ' ''' <param name="p_currentMultiModelType">Grouping enumeration type of the current model.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Sub UpdateMultiModelGroupName(ByVal p_modelName As String,
    '    '                                      ByVal p_currentMultiModelType As eMultiModelType)
    '    '    If p_currentMultiModelType = eMultiModelType.starting Then _currentMultiModelGroupName = GetMultiModelGroupName(p_modelName)
    '    'End Sub

    '    ' ''' <summary>
    '    ' ''' Updates the key words for grouped models, depending on the grouping enumeration type.
    '    ' ''' </summary>
    '    ' ''' <param name="p_currentMultiModelType">Grouping enumeration type of the current model.</param>
    '    ' ''' <remarks></remarks>
    '    'Private Sub UpdateKeyWordsMultiModel(ByVal p_currentMultiModelType As eMultiModelType)
    '    '    If Not p_currentMultiModelType = eMultiModelType.singleModel Then
    '    '        myMCModel.keywords.RemoveByTag(TAG_KEYWORD_MULTI_MODEL)
    '    '        myMCModel.keywords.Add(TAG_KEYWORD_MULTI_MODEL & _currentMultiModelGroupName)
    '    '    End If
    '    'End Sub

    '    ' ''' <summary>
    '    ' ''' Increments the model ID count for the current model in a series of models being created.
    '    ' ''' </summary>
    '    ' ''' <param name="p_currentModelID">ID of the current model.</param>
    '    ' ''' <param name="p_currentMultiModelType">Grouping enumeration type of the current model.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function IncrementModelIDs(ByVal p_currentModelID As String,
    '    '                                   ByVal p_currentMultiModelType As eMultiModelType) As String
    '    '    Select Case p_currentMultiModelType
    '    '        Case eMultiModelType.starting : Return IncrementModelSubIDs(p_currentModelID, True)
    '    '        Case eMultiModelType.continuing : Return IncrementModelSubIDs(p_currentModelID, False)
    '    '        Case eMultiModelType.singleModel : Return IncrementModelGroupIDs(p_currentModelID)
    '    '        Case Else : Return p_currentModelID
    '    '    End Select
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Returns 'True' if all of the models in the set will be part of the same model/example group.
    '    ' ''' </summary>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function IsMultiModelSpecified() As Boolean

    '    '    Select Case multiModelMethod
    '    '        Case eMultiModelIDNumbering.All : Return True
    '    '        Case eMultiModelIDNumbering.Auto : Return False
    '    '        Case eMultiModelIDNumbering.None : Return False
    '    '        Case Else : Return False
    '    '    End Select

    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Determines if the current model is a member of the last recorded model group.
    '    ' ''' </summary>
    '    ' ''' <param name="p_modelFileName">Name of the model file.</param>
    '    ' ''' <param name="p_currentMultiModelGroupName">Name of the current example group.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function IsMultiModelOfCurrentGroup(ByVal p_modelFileName As String,
    '    '                                            ByVal p_currentMultiModelGroupName As String) As Boolean
    '    '    If StringExistInName(p_modelFileName, p_currentMultiModelGroupName) Then
    '    '        Return True
    '    '    Else
    '    '        Return False
    '    '    End If
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' If 'True', then the model of the specified name is the first model in a group.
    '    ' ''' </summary>
    '    ' ''' <param name="p_modelFileName">>Name of the model file.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function IsStartingMultiModel(ByVal p_modelFileName As String) As Boolean
    '    '    Dim precedingCharacter As String = ""
    '    '    Dim currentCharacter As String = ""

    '    '    IsStartingMultiModel = False

    '    '    If NameIncludesFileExtension(p_modelFileName, 3) Then p_modelFileName = GetPathFileName(p_modelFileName, True)

    '    '    For p_currentCharacterIndex = 1 To Len(p_modelFileName)
    '    '        precedingCharacter = currentCharacter
    '    '        currentCharacter = Mid(p_modelFileName, p_currentCharacterIndex, 1)

    '    '        If IsStartingMultiModelByCharacter(precedingCharacter, currentCharacter) Then IsStartingMultiModel = True
    '    '    Next

    '    '    Return IsStartingMultiModel
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' If 'True' then the model is determined to be the first model of a group of models by comparing two neighboring text characters from the file name.
    '    ' ''' </summary>
    '    ' ''' <param name="p_precedingCharacter">Preceding text character to check in relation to the current character.</param>
    '    ' ''' <param name="p_currentCharacter">Current text characted being checked.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function IsStartingMultiModelByCharacter(ByVal p_precedingCharacter As String,
    '    '                                                 ByVal p_currentCharacter As String) As Boolean
    '    '    Dim possibleMultiModelGroup As Boolean = False
    '    '    Dim startingLetter As String = "a"
    '    '    Dim startingNumberZero As String = "0"
    '    '    Dim startingNumber As String = "1"
    '    '    Dim indicatorDash As String = "="
    '    '    Dim indicatorDecimal As String = "."

    '    '    If p_currentCharacter = startingLetter Then
    '    '        If (IsNumeric(p_precedingCharacter) OrElse
    '    '            p_precedingCharacter = indicatorDash OrElse
    '    '            p_precedingCharacter = indicatorDecimal) Then

    '    '            'e.g. Example 5a, Example 5-a, Example 5.a
    '    '            possibleMultiModelGroup = True
    '    '        End If
    '    '    ElseIf p_precedingCharacter = indicatorDecimal Then
    '    '        If p_currentCharacter = startingNumberZero Then
    '    '            'e.g. Example 5.0
    '    '            possibleMultiModelGroup = True
    '    '            _isFirstGroupNameWithZero = True
    '    '        ElseIf p_currentCharacter = startingNumber Then
    '    '            'e.g. Example 5.1
    '    '            If Not _isFirstGroupNameWithZero Then possibleMultiModelGroup = True
    '    '            _isFirstGroupNameWithZero = False
    '    '        End If
    '    '    End If

    '    '    Return possibleMultiModelGroup
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Determines the group name of a set of model files.
    '    ' ''' </summary>
    '    ' ''' <param name="p_fileNameFirstGroupModel">File name of the model that is the first one of a group.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function GetMultiModelGroupName(ByVal p_fileNameFirstGroupModel As String) As String
    '    '    Dim precedingCharacter As String = ""
    '    '    Dim currentCharacter As String = ""
    '    '    Dim currentMultiModelGroupName As String = ""

    '    '    If NameIncludesFileExtension(p_fileNameFirstGroupModel, 3) Then p_fileNameFirstGroupModel = GetPathFileName(p_fileNameFirstGroupModel, True)

    '    '    For p_currentCharacterIndex = 1 To Len(p_fileNameFirstGroupModel)
    '    '        precedingCharacter = currentCharacter
    '    '        currentCharacter = Mid(p_fileNameFirstGroupModel, p_currentCharacterIndex, 1)

    '    '        If IsStartingMultiModelByCharacter(currentCharacter, precedingCharacter) Then
    '    '            currentMultiModelGroupName = MultiModelGroupNameAssumed(p_fileNameFirstGroupModel, p_currentCharacterIndex)
    '    '        End If
    '    '    Next

    '    '    Return currentMultiModelGroupName
    '    'End Function

    '    ' ''' <summary>
    '    ' ''' Determines an assumed group name of a set of model files based on the file name and a specified index.
    '    ' ''' The name resturned is dependent on the index specified and there might be several results, with the correct result coming from the highest index number.
    '    ' ''' </summary>
    '    ' ''' <param name="p_modelFileName">Name of the model file to use to formulate an assumed group name.</param>
    '    ' ''' <param name="p_currentCharacterIndex">Character index to use to formulate an assumed group name.</param>
    '    ' ''' <returns></returns>
    '    ' ''' <remarks></remarks>
    '    'Private Function MultiModelGroupNameAssumed(ByVal p_modelFileName As String,
    '    '                                            ByVal p_currentCharacterIndex As Integer) As String
    '    '    Dim numCharacters As Integer

    '    '    If IsNumeric(Right(Left(p_modelFileName, p_currentCharacterIndex - 1), 1)) Then
    '    '        numCharacters = p_currentCharacterIndex - 1                       'e.g. to preserve 'Example 1' from 'Example 1a'
    '    '    Else
    '    '        numCharacters = p_currentCharacterIndex - 2
    '    '    End If

    '    '    If (0 <= numCharacters AndAlso numCharacters <= p_modelFileName.Length) Then
    '    '        MultiModelGroupNameAssumed = Left(p_modelFileName, numCharacters)
    '    '    Else
    '    '        MultiModelGroupNameAssumed = p_modelFileName
    '    '    End If
    '    'End Function

    '#End Region
End Class
