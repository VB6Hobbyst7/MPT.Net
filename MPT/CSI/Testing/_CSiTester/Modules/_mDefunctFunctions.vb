Imports System.Collections.ObjectModel

''' <summary>
''' This module contains functions that are probably to be deleted, but held on to just in case. Most are commented out to keep them invisible to the program.
''' </summary>
''' <remarks></remarks>
Module _mDefunctFunctions

    ''' <summary>
    ''' Changes Application Menu Picture Programmatically
    ''' </summary>
    ''' <remarks>Suppressed in released version, to maintain a generic, static icon.</remarks>
    Private Sub changeAppMenuIcon()
        'myRibbonAppMenuBackground.ImageSource = New BitmapImage(New Uri("/CSiTester;component/Resources/SAP2000 Icon.ICO", UriKind.Relative))
        'If csiTesterLevel = eCSiTesterLevel.Published Then Exit Sub 'Prevents icon from matching program for published version. This is to avoid need to update the icon in the tester with any new icons released with the program

        'Try
        '    myRibbonAppMenuBackground.ImageSource = New BitmapImage(New Uri(testerSettings.IconPathString, UriKind.Relative))
        'Catch ex As Exception
        '    'If Not suppressExStates Then
        '    '    'myLogger
        '    '    MsgBox(ex.Message)
        '    '    MsgBox(ex.StackTrace)
        '    'End If
        '    Exit Sub
        'End Try

    End Sub


    'Old
    ' ''' <summary>
    ' ''' Replaces a substring in a string. Returns the new string.
    ' ''' </summary>
    ' ''' <param name="myOldString">String to be searched</param>
    ' ''' <param name="myOldSubString">Substring segment to search for and be replaced</param>
    ' ''' <param name="myNewSubString">Substring segment to replace</param>
    ' ''' <returns>Returns the new string.</returns>
    ' ''' <remarks></remarks>
    'Function ReplaceStringInName(ByVal myOldString As String, ByVal myOldSubString As String, ByVal myNewSubString As String, Optional ByVal suppressWarnings As Boolean = False) As String
    '    Dim OldStringFound As Boolean = False
    '    ReplaceStringInName = myOldString

    '    If myOldSubString = myOldString Then
    '        Exit Function
    '    Else
    '        For i = 1 To Len(myOldString) - Len(myOldSubString)
    '            If Mid(myOldString, i, Len(myOldSubString)) = myOldSubString Then  'Old String was found in name. Replace with new string.
    '                ReplaceStringInName = Left(myOldString, i - 1) & myNewSubString & Right(myOldString, Len(myOldString) - i - Len(myOldSubString))
    '                OldStringFound = True
    '            End If
    '        Next
    '    End If

    '    If Not OldStringFound And Not suppressWarnings Then MessageBox.Show("String not found within name. Name will remain unchanged")
    'End Function



    ' ''' <summary>
    ' ''' Signals reader/writer to delete the XML node.
    ' ''' </summary>
    ' ''' <value></value>
    ' ''' <returns></returns>
    ' ''' <remarks></remarks>
    ' '''  Public Property deleteNode As String = "delete_node"

    ''TODO: No longer used.
    ' ''' <summary>
    ' ''' For all nodes set to be saved, if they have the 'delete' call as their value, the node and all child nodes will be deleted
    ' ''' </summary>
    ' ''' <param name="myXMLCollection">Collection of XML node classes that make up the XML file in memory</param>
    ' ''' <remarks></remarks>
    Sub DeleteXMLFileNodesByPath(ByRef myXMLCollection As ObservableCollection(Of cXMLNode))
        '    For Each myXMLNode As cXMLNode In myXMLCollection
        '        Try
        '            'Checks child nodes first
        '            If Not IsNothing(myXMLNode.xmlChildren) Then
        '                DeleteXMLFileNodesByPath(myXMLNode.xmlChildren)
        '            End If

        '            If myXMLNode.saveChanges And myXMLNode.value = myXMLEditor.deleteNode Then
        '                If myXMLNode.type = eXMLElementType.Attribute Then
        '                    DeleteNodeByPath(myXMLNode.xmlPath, myXMLNode.name)
        '                Else
        '                    DeleteNodeByPath(myXMLNode.xmlPath)
        '                End If
        '                myXMLEditor.nodeDeleted = True
        '                myXMLNode.saveChanges = False
        '            End If
        '        Catch ex As Exception
        '            If Not suppressExStates Then
        '                'myLogger
        '                MsgBox(ex.Message)
        '                MsgBox(ex.StackTrace)
        '            End If
        '        End Try
        '    Next

    End Sub


    'TODO: Not used anymore
    ''' <summary>
    ''' Customizes autogenerated columns, such as header text
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub dataGrid_ValueNodeContent_AutoGeneratingColumn(sender As Object, e As DataGridAutoGeneratingColumnEventArgs) 'Handles dataGrid_ValueNodeContent.AutoGeneratingColumn
        'Specifies which columns are 'read only'
        'If Not e.PropertyName = "NodeValue" And Not e.PropertyName = "SaveChanges" Then
        '    e.Column.IsReadOnly = True
        'End If

        ' Modify the header of the Name column.
        'If e.Column.Header.ToString() = "NodeValue" Then
        '    e.Column.Header = "Node Value"
        'End If
        'If e.Column.Header.ToString() = "SaveChanges" Then
        '    e.Column.Header = "Save Changes"
        'End If
        'If e.Column.Header.ToString() = "FileName" Then
        '    e.Column.Header = "File Name"
        '    'e.Column.CellStyle = "x:Key='CellHyperLink'"
        'End If
        'If e.Column.Header.ToString() = "NodeName" Then
        '    e.Column.Header = "Node Name"
        'End If

        ' Cancel autogeneration of particular columns
        'If e.Column.Header.ToString() = "ValueChanged" Then
        '    e.Cancel = True
        'End If
        'If e.Column.Header.ToString() = "gridViewIndex" Then
        '    e.Cancel = True
        'End If
        'If e.Column.Header.ToString() = "filePath" Then
        '    e.Cancel = True
        'End If

        '===Examples
        '' Replace the auto-generated column with the templateColumn.
        'e.Column = templateColumn

        ''  Replace the DueDate column with a custom template column.
        'If e.PropertyName = "DueDate" Then
        '    ' Create a new template column.
        '    Dim templateColumn As New DataGridTemplateColumn
        '    templateColumn.Header = "Due Date"
        '    templateColumn.CellTemplate = Me.Resources("dueDateCellTemplate")
        '    templateColumn.CellEditingTemplate = Me.Resources("dueDateCellEditingTemplate")
        '    templateColumn.SortMemberPath = "DueDate"
        '    ' ...
        'End If
    End Sub

    'TODO: Remove?
    ' ''' <summary>
    ' ''' Creates collection listing the XML paths of all of the examples set to be run
    ' ''' </summary>
    ' ''' <param name="XMLRunPathList"></param>
    ' ''' <remarks></remarks>
    'Sub GetExampleRunList(ByRef XMLRunPathList As ObservableCollection(Of String))
    '    Dim XMLResultsPathBase As String
    '    Dim XMLResultsPath As String

    '    XMLResultsPathBase = regTest.output_directory

    '    For Each myexampleTestSet As cExampleTestSet In examplesTestSetList
    '        For Each myExampleRun As cExample In myexampleTestSet.examplesList
    '            If myExampleRun.runExample = True Then
    '                XMLResultsPath = XMLResultsPathBase & "\model_" & myExampleRun.modelID & ".xml"
    '                XMLRunPathList.Add(XMLResultsPath)
    '            End If
    '        Next
    '    Next
    'End Sub

    ''TODO: Still necessary?
    ' ''' <summary>
    ' ''' For each XML file in the specified directory, runs the 'read XML' function to generate a class of nodes and properties divided into header nodes and value nodes
    ' ''' </summary>
    ' ''' <remarks></remarks>
    'Sub ReadAllEditorXMLS()
    '    For Each myXMLpath As String In myCsiTester.suiteXMLPathList
    '        myXMLEditor.suiteEditorXMLObjects.Add(Read_XML_Elements_All(myXMLpath))
    '    Next
    'End Sub

    ''TODO: Still necessary?
    ' ''' <summary>
    ' ''' Creates a list of all nodes and attributes in an XML document, with various properties recorded. This sub sets up the xml file then calls another sub
    ' ''' </summary>
    ' ''' <param name="myPath">Path to the XML file to be used</param>
    ' ''' <remarks></remarks>
    'Function Read_XML_Elements_All(ByVal myPath As String) As cXMLObject
    '    'Creates a list of all nodes in an XML document
    '    'This sub sets up the xml file then calls another sub

    '    xmlFile = New cXMLObject

    '    InitializeXML(myPath)
    '    xmlFile.FileName = GetPathFileName(myPath)

    '    Dim ChildLevel As Integer = 1

    '    List_ChildNodes(ChildLevel, xmlRoot.ChildNodes, 0)

    '    Read_XML_Elements_All = xmlFile
    'End Function

    ' ''' <summary>
    ' ''' Creates a list of all child nodes in an XML document, sorted by node vs. attribute type, and header vs. value node. Hierarchy levels are recorded, as well as value node index and header info.
    ' ''' </summary>
    ' ''' <param name="myChildLevel">Level in the nodal hierarchy. Level 1 is the first level as the root node is at level 0.</param>
    ' ''' <param name="myChildNodes">Node object that includes all child nodes.</param>
    ' ''' <param name="myCounter">Current value node index in file.</param>
    ' ''' <remarks></remarks>
    'Sub List_ChildNodes(ByRef myChildLevel As Integer, ByVal myChildNodes As XmlNodeList, ByRef myCounter As Integer)


    '    Dim childCount As Integer
    '    Dim nodeHeader As String

    '    'Gather root node attributes, if they exist
    '    If Not IsNothing(xmlRoot.Attributes) And Not myChildLevel > 1 Then
    '        For Each xmlAttr As XmlAttribute In xmlRoot.Attributes
    '            myXMLFileNode = New cXMLNode
    '            myXMLFileNode.Name = xmlAttr.Name
    '            myXMLFileNode.Value = xmlAttr.InnerText
    '            myXMLFileNode.Type = eXMLElementType.Attribute
    '            myXMLFileNode.Level = myChildLevel
    '            myCounter = myCounter + 1
    '            myXMLFileNode.IndexFlat = myCounter
    '            xmlFile.AddNode(myXMLFileNode)
    '        Next
    '    End If

    '    For Each xmlNodeItem As Xml.XmlNode In myChildNodes
    '        childCount = 0
    '        Err.Clear()
    '        On Error Resume Next

    '        'Counts children based on 3 cases
    '        If Not xmlNodeItem.ChildNodes.Count > 0 Then                'Case 1: Node has no child
    '            childCount = 0
    '        ElseIf Not xmlNodeItem.FirstChild.Name = "#text" Then       'Case 2: Node has child, but child has no text (e.g. folder/header node)
    '            childCount = xmlNodeItem.ChildNodes.Count
    '        Else                                                        'Case 3: Node has child, children have text. Count skips a node layer as each text item is yet another node
    '            childCount = xmlNodeItem.ChildNodes(0).ChildNodes.Count
    '        End If

    '        If childCount > 0 Then
    '            'Gather Header Info
    '            myXMLFileHeader = New cXMLNodeHeader
    '            myXMLFileHeader.Name = xmlNodeItem.Name
    '            myXMLFileHeader.Level = myChildLevel
    '            myXMLFileHeader.IndexFlat = myCounter + 1               'Counter is not advanced for header, but header index should correspond to the next value node encountered
    '            xmlFile.AddHeader(myXMLFileHeader)

    '            'Advance child level and call function again
    '            myChildLevel = myChildLevel + 1
    '            Call List_ChildNodes(myChildLevel, xmlNodeItem.ChildNodes, myCounter)
    '        Else
    '            'Populate node data
    '            myXMLFileNode = New cXMLNode

    '            If xmlNodeItem.Name = "#text" Then                      'Case 1: Value node with text
    '                myXMLFileNode.Name = xmlNodeItem.ParentNode.Name
    '            Else                                                    'Case 2: Value node with no text
    '                myXMLFileNode.Name = xmlNodeItem.Name
    '            End If

    '            myXMLFileNode.Value = xmlNodeItem.InnerText
    '            myXMLFileNode.Type = eXMLElementType.Node
    '            myXMLFileNode.Level = myChildLevel
    '            myCounter = myCounter + 1
    '            myXMLFileNode.IndexFlat = myCounter
    '            xmlFile.AddNode(myXMLFileNode)

    '            'Gather attributes, if they exist
    '            If Not IsNothing(xmlNodeItem.Attributes) Then
    '                For Each xmlAttr As XmlAttribute In xmlNodeItem.Attributes
    '                    myXMLFileNode = New cXMLNode
    '                    myXMLFileNode.Name = xmlNodeItem.Name & "@" & xmlAttr.Name
    '                    myXMLFileNode.Value = xmlAttr.InnerText
    '                    myXMLFileNode.Type = eXMLElementType.Attribute
    '                    myXMLFileNode.Level = myChildLevel
    '                    myCounter = myCounter + 1
    '                    myXMLFileNode.IndexFlat = myCounter
    '                    xmlFile.AddNode(myXMLFileNode)
    '                Next
    '            End If
    '        End If
    '    Next

    '    'Reverse child level back
    '    myChildLevel = myChildLevel - 1

    '    'Establish column span of header at prior child level
    '    For Each myHeader As cXMLNodeHeader In xmlFile.xmlHeaders
    '        If myHeader.Level = myChildLevel And myHeader.ColumnSpan = 0 Then
    '            myHeader.ColumnSpan = myCounter - myHeader.IndexFlat + 1
    '            Exit For
    '        End If
    '    Next

    'End Sub

    'From cXMLObject

    'Sub AddNode(ByRef myNode As cXMLNode)
    '    xmlNodes.Add(myNode)
    'End Sub
    'Sub AddHeader(ByRef myHeader As cXMLNodeHeader)
    '    xmlHeaders.Add(myHeader)
    'End Sub

    'TODO: Remove?
    'Public Class cXMLNodeHeader
    '    Public Property Name As String
    '    Public Property Level As Integer
    '    Public Property IndexFlat As Integer
    '    Public Property ColumnSpan As Integer
    'End Class

    'TODO: Remove?
    'Public Class cXMLNodeTree
    '    Public Property XMLNode As cXMLNode
    '    Public Property XMLObject As cXMLObject
    'End Class

    'TODO: Remove?
    'TODO: Probably should merge with the standard node class, then 'turn off' the columns to not be displayed in the datagrid
    ' ''' <summary>
    ' ''' Class used to display unique nodes the Bulk XML Editor datagrid
    ' ''' </summary>
    ' ''' <remarks></remarks>
    'Public Class cXMLNodeDataGrid
    '#Region "Properties"
    '    'Public Property SaveChanges As Boolean
    '    'Public Property FileName As String
    '    'Public Property Result As Integer       'If there is more than one node of this name, this is the index number
    '    'Public Property FilePath As String

    '    'Public Property Level As Integer
    '    'Public Property IndexFlat As Integer
    '    'Public Property gridViewIndex As Integer

    '    ''Name Public Property NodeName As String
    '    ''Value Public Property NodeValue As String

    '    'Public Property ValueChanged As Boolean
    '#End Region

    '#Region "Initialization"
    '    'Friend Sub New()

    '    'End Sub


    '    ''' <summary>
    '    ''' Automatically populates class
    '    ''' </summary>
    '    ''' <param name="myXMLNode">XML Node selected for display</param>
    '    ''' <param name="myFileName">Name of the XML file</param>
    '    ''' <remarks></remarks>
    '    Friend Sub New(ByVal myXMLNode As cXMLNode, ByVal myFileName As String, Optional ByVal myResult As Integer = 0, Optional ByVal myGridviewIndex As Integer = 0)
    '        FileName = myFileName
    '        If Not myResult = 0 Then Result = myResult
    '        NodeName = myXMLNode.Name
    '        NodeValue = myXMLNode.Value
    '        Level = myXMLNode.Level
    '        IndexFlat = myXMLNode.IndexFlat
    '        SaveChanges = myXMLNode.SaveChanges
    '        ValueChanged = myXMLNode.ValueChanged
    '        gridViewIndex = myGridviewIndex
    '        FilePath = myXMLNode.FilePath
    '    End Sub
    '#End Region

    'End Class


    ' ''' <summary>
    ' ''' Changes executable path from absolute to relative
    ' ''' </summary>
    ' ''' <param name="sender"></param>
    ' ''' <param name="e"></param>
    ' ''' <remarks></remarks>
    'Private Sub Toggle_LocationRelative_Checked(sender As Object, e As RoutedEventArgs) Handles Toggle_LocationRelativeBasic.Checked, Toggle_LocationRelative.Checked
    '    If frmInitialize Then Exit Sub 'Prevents this action from ocurring when form is initializing
    '    Dim appDir As String            'Application directory
    '    Dim currDir As String           'Current opening directory. TO DO: Hard code a final default location
    '    Dim file As Boolean             'Is path for a file (true) or folder (false)? This affects the end result of converting absolute to relative
    '    Dim path As String              'Resulting path

    '    appDir = pathStartup()
    '    currDir = appDir

    '    file = True

    '    path = convAbsRel(currDir, CStr(btnBrowseProgramBasic.Content), file)

    '    'Updates
    '    Toggle_LocationRelative.IsChecked = True
    '    Toggle_LocationRelativeBasic.IsChecked = True

    '    btnBrowseProgram.Content = path
    '    btnBrowseProgramBasic.Content = btnBrowseProgram.Content

    '    btnBrowseProgram.ToolTip = browseProgramToolTipBase & Chr(10) & path
    '    btnBrowseProgramBasic.ToolTip = btnBrowseProgram.ToolTip

    '    regTest.program_path = path
    '    regTest.program_attribType = "relative"

    'End Sub

    ' ''' <summary>
    ' ''' Changes executable path from relative to absolute
    ' ''' </summary>
    ' ''' <param name="sender"></param>
    ' ''' <param name="e"></param>
    ' ''' <remarks></remarks>
    'Private Sub Toggle_LocationRelative_Unchecked(sender As Object, e As RoutedEventArgs) Handles Toggle_LocationRelativeBasic.Unchecked, Toggle_LocationRelative.Unchecked
    '    If frmInitialize Then Exit Sub 'Prevents this action from ocurring when form is initializing
    '    Dim appDir As String            'Application directory
    '    Dim currDir As String           'Current opening directory. TO DO: Hard code a final default location
    '    Dim file As Boolean             'Is path for a file (true) or folder (false)? This affects the end result of converting absolute to relative
    '    Dim path As String              'Resulting path

    '    appDir = pathStartup()
    '    currDir = appDir

    '    file = True

    '    path = convRelAbs(currDir, CStr(btnBrowseProgramBasic.Content))

    '    'Updates
    '    Toggle_LocationRelative.IsChecked = False
    '    Toggle_LocationRelativeBasic.IsChecked = False

    '    btnBrowseProgram.Content = path
    '    btnBrowseProgramBasic.Content = btnBrowseProgram.Content

    '    btnBrowseProgram.ToolTip = browseProgramToolTipBase & Chr(10) & path
    '    btnBrowseProgramBasic.ToolTip = btnBrowseProgram.ToolTip

    '    regTest.program_path = path
    '    regTest.program_attribType = "absolute"

    'End Sub

    ' ''' <summary>
    ' ''' Changes path to source folder from absolute to relative
    ' ''' </summary>
    ' ''' <param name="sender"></param>
    ' ''' <param name="e"></param>
    ' ''' <remarks></remarks>
    'Private Sub Toggle_SourceRelative_Checked(sender As Object, e As RoutedEventArgs) Handles Toggle_SourceRelative.Checked
    '    If frmInitialize Then Exit Sub 'Prevents this action from ocurring when form is initializing
    '    Dim appDir As String            'Application directory
    '    Dim currDir As String           'Current opening directory. TO DO: Hard code a final default location
    '    Dim file As Boolean             'Is path for a file (true) or folder (false)? This affects the end result of converting absolute to relative
    '    Dim path As String              'Resulting path

    '    appDir = pathStartup()
    '    currDir = appDir & "\regtest"

    '    file = False

    '    path = convAbsRel(currDir, CStr(btnBrowseSource.Content), file)

    '    'Updates
    '    btnBrowseSource.Content = path

    '    btnBrowseSource.ToolTip = browseSourceToolTipBase & Chr(10) & path

    '    regTest.models_database_directory = path
    '    regTest.models_database_directory_attrib = "relative"
    'End Sub

    ' ''' <summary>
    ' ''' Changes path to source folder from relative to absolute
    ' ''' </summary>
    ' ''' <param name="sender"></param>
    ' ''' <param name="e"></param>
    ' ''' <remarks></remarks>
    'Private Sub Toggle_SourceRelative_UnChecked(sender As Object, e As RoutedEventArgs) Handles Toggle_SourceRelative.Unchecked
    '    If frmInitialize Then Exit Sub 'Prevents this action from ocurring when form is initializing
    '    Dim appDir As String            'Application directory
    '    Dim currDir As String           'Current opening directory. TO DO: Hard code a final default location
    '    Dim file As Boolean             'Is path for a file (true) or folder (false)? This affects the end result of converting absolute to relative
    '    Dim path As String              'Resulting path

    '    appDir = pathStartup()
    '    currDir = appDir & "\regtest"

    '    file = False

    '    path = convRelAbs(currDir, CStr(btnBrowseSource.Content))

    '    'Updates
    '    btnBrowseSource.Content = path

    '    btnBrowseSource.ToolTip = browseSourceToolTipBase & Chr(10) & path

    '    regTest.models_database_directory = path
    '    regTest.models_database_directory_attrib = "absolute"
    'End Sub

    ' ''' <summary>
    ' ''' Changes path to destination folder from absolute to relative
    ' ''' </summary>
    ' ''' <param name="sender"></param>
    ' ''' <param name="e"></param>
    ' ''' <remarks></remarks>
    'Private Sub Toggle_DestinationRelative_Checked(sender As Object, e As RoutedEventArgs) Handles Toggle_DestinationRelativeBasic.Checked, Toggle_DestinationRelative.Checked
    '    If frmInitialize Then Exit Sub 'Prevents this action from ocurring when form is initializing
    '    Dim appDir As String            'Application directory
    '    Dim currDir As String           'Current opening directory. TO DO: Hard code a final default location
    '    Dim file As Boolean             'Is path for a file (true) or folder (false)? This affects the end result of converting absolute to relative
    '    Dim path As String              'Resulting path

    '    appDir = pathStartup()
    '    currDir = appDir & "\regtest"

    '    file = False

    '    path = convAbsRel(currDir, CStr(btnBrowseDestination.Content), file)

    '    'Updates
    '    Toggle_DestinationRelativeBasic.IsChecked = True
    '    Toggle_DestinationRelative.IsChecked = True

    '    btnBrowseDestination.Content = path
    '    btnBrowseDestinationBasic.Content = btnBrowseDestination.Content

    '    btnBrowseDestination.ToolTip = browseDestinationToolTipBase & Chr(10) & path
    '    btnBrowseDestinationBasic.ToolTip = btnBrowseDestination.ToolTip

    '    regTest.models_run_directory = path
    '    regTest.models_run_directory_attrib = "relative"
    'End Sub

    ' ''' <summary>
    ' ''' Changes path to destination folder from relative to absolute
    ' ''' </summary>
    ' ''' <param name="sender"></param>
    ' ''' <param name="e"></param>
    ' ''' <remarks></remarks>
    'Private Sub Toggle_DestinationRelative_UnChecked(sender As Object, e As RoutedEventArgs) Handles Toggle_DestinationRelativeBasic.Unchecked, Toggle_DestinationRelative.Unchecked
    '    If frmInitialize Then Exit Sub 'Prevents this action from ocurring when form is initializing
    '    Dim appDir As String            'Application directory
    '    Dim currDir As String           'Current opening directory. TO DO: Hard code a final default location
    '    Dim file As Boolean             'Is path for a file (true) or folder (false)? This affects the end result of converting absolute to relative
    '    Dim path As String              'Resulting path

    '    appDir = pathStartup()
    '    currDir = appDir & "\regtest"

    '    file = False

    '    path = convRelAbs(currDir, CStr(btnBrowseDestination.Content))

    '    'Updates
    '    Toggle_DestinationRelativeBasic.IsChecked = False
    '    Toggle_DestinationRelative.IsChecked = False

    '    btnBrowseDestination.Content = path
    '    btnBrowseDestinationBasic.Content = btnBrowseDestination.Content

    '    btnBrowseDestination.ToolTip = browseDestinationToolTipBase & Chr(10) & path
    '    btnBrowseDestinationBasic.ToolTip = btnBrowseDestination.ToolTip

    '    regTest.models_run_directory = path
    '    regTest.models_run_directory_attrib = "absolute"
    'End Sub



    'TODO: This entire section has been deactivated. Move to saved functions?

    ' ''' <summary>
    ' ''' Assigns a list of file extensions for the appropriate program chosen to be checked
    ' ''' </summary>
    ' ''' <returns>The list of file extensions for the matching program</returns>
    ' ''' <remarks></remarks>
    'Function checkDropDownList() As String()
    'Dim keyTitle As String
    'Dim listName As String()

    '    keyTitle = regTest.program_name

    '    If keyTitle = "SAP2000" Then
    '        listName = regTest.dropdownList_SAP2000
    '    ElseIf keyTitle = "CSiBridge" Then
    '        listName = regTest.dropdownList_Bridge
    '    ElseIf keyTitle = "ETABS" Then
    '        listName = regTest.dropdownList_ETABS
    '    ElseIf keyTitle = "SAFE" Then
    '        listName = regTest.dropdownList_SAFE
    '    Else
    '        ReDim listName(0)
    '        listName(0) = ""
    '        MsgBox("Warning. No matching program type is selected. File type list will be empty")
    '    End If

    '    checkDropDownList = listName
    'End Function

    '===========================
    '///Made for Windows forms. Needs updating if needed for WPF forms
    '===========================
    'Function IsUserFormLoaded(ByVal UFName As String) As Boolean
    '    'checks whether a specified form is loaded
    '    'From http://stackoverflow.com/questions/15439440/check-if-form-is-opened

    '    Dim frmCol As New FormCollection()
    '    Dim Cnt As Integer = 0

    '    frmCol = Application.OpenForms
    '    For Each f As Form In frmCol
    '        If f.Name = UFName Then Cnt += 1
    '    Next
    '    Return IIf(Cnt > 0, True, False)

    'End Function

    'Sub closeFormUpdateOpenForms(ByVal formClose As Form, ByVal formOpen As Object)
    '    'If closing one form should cause updates in another form, such as passing data, actions are done in this function
    '    Dim i As Long
    '    Dim programFileType As String()

    '    formClose.Close()

    '    If formOpen.Name = "frmRunSetup" Then
    '        'Program Name Label Update
    '        formOpen.lblProgram.text = regTest.program_name
    '        'Combo Box Update. Defaults to standard file type for program selected.
    '        ' regTest.fileType = regTest.program_name 'Update?

    '        formOpen.cmbbxFileType.Items.clear()    'Clears combo box
    '        programFileType = checkDropDownList()   'Determines and assigns new combo list
    '        formOpen.cmbbxFileType.Items.AddRange(programFileType)  'Populates listbox from corresponding list

    '        'Combo Box Update.
    '        For i = 0 To formOpen.cmbbxFileType.Items.Count - 1    'Selects initial cell
    '            If i = 0 Then
    '                If formOpen.cmbbxFileType.Items(i) <> regTest.fileType Then  'Defaults to standard file type for program selected if there is a mismatch between lists.
    '                    regTest.fileType = regTest.getDefaultFileType
    '                End If
    '            End If
    '            If formOpen.cmbbxFileType.Items(i) = regTest.fileType Then
    '                formOpen.cmbbxFileType.SelectedItem = regTest.fileType
    '                Exit For
    '            End If
    '        Next i

    '    End If
    'End Sub

    '============================================

    '
    'Sub autoInitialize()
    '    'Fill Text Fields
    '    TextBox_TimeMultiplier.Text = Range("")
    '
    '    'Fill Checkboxes
    '    If Range("") = "yes" Then
    '        CheckBox_LogFiles.CheckState = CheckState.Checked
    '    Else
    '        CheckBox_LogFiles.CheckState = CheckState.UnChecked
    '    End If
    '
    '    'Fill Radio Buttons
    '    If Range("") = "absolute" Then
    '        Option_SourceAbsolute.checked = True
    '        Option_SourceRelative.checked = False
    '    Else
    '        Option_SourceAbsolute.checked = False
    '        Option_SourceRelative.checked = True
    '    End If
    'End Sub

#Region "Popup Events"

    'Time Popups
    'Private Sub myRibbon_MouseEnter(sender As Object, e As MouseEventArgs) Handles myRibbon.MouseEnter
    '    myPopupTime.IsOpen = True
    'End Sub

    'Private Sub myRibbon_MouseLeave(sender As Object, e As MouseEventArgs) Handles myRibbon.MouseLeave
    '    myPopupTime.IsOpen = False
    'End Sub


    'Private Sub dataGrid_ExampleSummary_IsMouseDirectlyOverChanged(sender As Object, e As DependencyPropertyChangedEventArgs) Handles dataGrid_ExampleSummary.IsMouseDirectlyOverChanged

    'End Sub

    'Private Sub dataGrid_ExampleSummary_MouseEnter(sender As Object, e As MouseEventArgs) Handles dataGrid_ExampleSummary.MouseEnter
    '    'Dim exampleIndex As Integer
    '    'Dim myExampleNumberCode As String = ""   'Name of example title clicked. Used to match the cell clicked with the collection index of examples, as these can lose sync
    '    'Dim mySelectedTabIndex As Integer
    '    ''ByVal mySelectedTabIndex As Integer

    '    ''Determine which example was clicked in the datagrid rows
    '    'exampleIndex = 0

    '    'For Each exampleRow As cExample In dataGrid_ExampleSummary.SelectedItems
    '    '    myExampleNumberCode = exampleRow.numberCodeExample
    '    'Next

    '    'For Each exampleEntry As cExample In examplesTestSetList(mySelectedTabIndex).examplesList
    '    '    If exampleEntry.numberCodeExample = myExampleNumberCode Then Exit For
    '    '    exampleIndex = exampleIndex + 1
    '    'Next

    '    'GetSelectedExample = exampleIndex
    '    'gridRow = dataGrid_ExampleSummary.SelectedIndex      'Original alternative. 
    '    'DO NOT USE if user is allowed to sort rows, as the index will not match the examples order


    '    ' myPopupTime.IsOpen = True
    'End Sub

    'Private Sub dataGrid_ExampleSummary_MouseLeave(sender As Object, e As MouseEventArgs) Handles dataGrid_ExampleSummary.MouseLeave
    '    'myPopupTime.IsOpen = False
    'End Sub


    ''% Change Popup
    'Private Sub TabMaster_MouseEnter(sender As Object, e As MouseEventArgs) Handles TabMaster.MouseEnter
    '    'myPopupExample.IsOpen = True
    'End Sub

    'Private Sub TabMaster_MouseLeave(sender As Object, e As MouseEventArgs) Handles TabMaster.MouseLeave
    '    'myPopupExample.IsOpen = False
    'End Sub

    Sub OnHyperlinkHover(ByVal o As TextBlock, ByVal e As RoutedEventArgs)
        'Dim myTabIndex As Integer    'Tab Index, corresponding to a test set
        'Dim myExampleIndex As Integer   'Selected Example index within a given test set

        'Get selected tab, which corresponds to the example test set needed
        'myTabIndex = myTabControlSummary.SelectedIndex

        'Determine which example was clicked in the datagrid rows
        'For Each myRow As DataGridRow In dataGrid_ExampleSummary.Items
        '    If myRow.IsMouseOver = True Then
        '        myExampleIndex = myRow.GetIndex
        '    End If
        'Next


        'GetSelectedExample(myTabIndex)

        'labelCodeExampleNumber.Text = CStr(dataGrid_ExampleSummary.SelectedIndex)
        'myPopupExample.IsOpen = True
    End Sub

    Sub OnHyperlinkHoverOff(ByVal o As TextBlock, ByVal e As RoutedEventArgs)
        ' myPopupExample.IsOpen = False
    End Sub

#End Region
End Module
