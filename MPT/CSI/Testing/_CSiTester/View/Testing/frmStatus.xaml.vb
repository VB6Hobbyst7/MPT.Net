Option Explicit On
Option Strict On

Imports System.ComponentModel

Imports MPT.Enums.EnumLibrary
Imports MPT.Files.FileLibrary
Imports MPT.FileSystem.FoldersLibrary
Imports MPT.FileSystem.PathLibrary
Imports MPT.Reporting
Imports MPT.String.ConversionLibrary
Imports MPT.Time.TimeLibrary
Imports MPT.XML.ReaderWriter

Imports CSiTester.cRegTest

''' <summary>
''' This form appears during the running of regTest. It allows the user to cancel the regTest run, as well as displays to the user helpful status info such as the following:
''' Test name, start date and time, elapsed time, estimated time, status bar
''' Live display of the log entries generated by regTest.
''' </summary>
''' <remarks></remarks>
Public Class frmStatus
    Implements INotifyPropertyChanged
    Implements ILoggerEvent
    Implements IMessengerEvent

    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Public Event Log(exception As LoggerEventArgs) Implements ILoggerEvent.Log
    Public Event Messenger(messenger As MessengerEventArgs) Implements IMessengerEvent.Messenger

#Region "Constants: Private"
    Private Const _PROMPT_MISSING_FILE As String = "The following file does not exist: " & vbNewLine & vbNewLine
    Private Const _PROMPT_MISSING_FILE_ACTION As String = vbNewLine & vbNewLine & "The analysis will be aborted."
    Private Const _TITLE_MISSING_FILE As String = "Missing File"

    Private Const _PROMPT_REGTEST_ERROR As String = "regtest.exe has stopped reponding. Would you like to stop the test?" & vbNewLine & vbNewLine &
                                                    "If not, CSiTester will check regtest.exe again in 30 seconds."
    Private Const _PROMPT_REGTEST_NOT_RUNNING As String = "regtest.exe has stopped running. Exiting check . . ."
    Private Const _TITLE_REGTEST_ERROR As String = "regtest.exe Error"
#End Region

#Region "Fields"
    Private bw1 As BackgroundWorker
    Private xmlLock As New Object

    Private timeStartNum As Double
    Private timeCurrentNum As Double
    Private timeElapsedNum As Double        'Elapsed time for check in minutes
    Private timeInitialization As Double

    Private timeCurrent As String

    Private regtestInitialize As Boolean
    'Private processName As String = "regtest"
    Private regTestStart As Boolean = False
    Private inSync As Boolean
    Private canceled As Boolean

    Private _xmlReaderWriter As New cXmlReadWrite()
#End Region

#Region "Properties"
    Private _timeStart As String
    ''' <summary>
    ''' Time at which the check was started.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property timeStart As String
        Set(ByVal value As String)
            If Not _timeStart = value Then
                _timeStart = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("timeStart"))
            End If
        End Set
        Get
            Return _timeStart
        End Get
    End Property

    Private _timeElapsed As String
    ''' <summary>
    ''' Elapsed time for check in minutes.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property timeElapsed As String
        Set(ByVal value As String)
            If Not _timeElapsed = value Then
                _timeElapsed = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("timeElapsed"))
            End If
        End Set
        Get
            Return _timeElapsed
        End Get
    End Property

    Private _timeRemaining As String
    Public Property timeRemaining As String         'Estimated remaining time for check in minutes
        Set(ByVal value As String)
            If Not _timeRemaining = value Then
                _timeRemaining = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("timeRemaining"))
            End If
        End Set
        Get
            Return _timeRemaining
        End Get
    End Property

    Private _textBoxString As String
    Public Property textBoxString As String
        Set(ByVal value As String)
            If Not _textBoxString = value Then
                _textBoxString = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("textBoxString"))
            End If
        End Set
        Get
            Return _textBoxString
        End Get
    End Property

    Private _percentFinished As String
    Public Property percentFinished As String
        Set(ByVal value As String)
            If Not _percentFinished = value Then
                _percentFinished = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("percentFinished"))
            End If
        End Set
        Get
            Return _percentFinished
        End Get
    End Property

    Private _nextModelID As String
    Public Property nextModelID As String
        Set(ByVal value As String)
            If Not _nextModelID = value Then
                _nextModelID = value
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("nextModelID"))
            End If
        End Set
        Get
            Return _nextModelID
        End Get
    End Property

    Private _accumulatedModelIDs As List(Of String)
    Public Property accumulatedModelIDs As List(Of String)
        Set(ByVal value As List(Of String))
            _accumulatedModelIDs = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("accumulatedModelIDs"))
        End Set
        Get
            Return _accumulatedModelIDs
        End Get
    End Property
#End Region

#Region "Initialization"
    Friend Sub New()
        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
        'Startup Defaults
        SetDefaults()

        'Start thread
        StartThread()

    End Sub

    ''' <summary>
    ''' Sets basic starting values in the form and writes starting values in the control.xml
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub SetDefaults()
        e2eTestingRunning = False

        timeStart = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss")
        timeStartNum = DateTime.Now.Second / 60 + DateTime.Now.Minute + DateTime.Now.Hour * 60

        SetLabelText_ThreadSafe(lblTestName, myRegTest.test_id)
        SetLabelText_ThreadSafe(lblStartTime, timeStart)

        textBoxString = timeStart
        txtBlck_StatusLog.Text = textBoxString

        If testerSettings.csiTesterlevel = eCSiTesterLevel.Published Then
            'Collapse log view and adjust form to be a smaller size, and no longer vertically re-sizable
            brdrStatusLog.Visibility = Windows.Visibility.Collapsed
            Me.MinHeight = 200
            Me.MaxHeight = Me.MinHeight
            Me.Height = Me.MinHeight
        End If

        'Ensure that control file has correct starting values
        InitializeControl()
    End Sub

    ''' <summary>
    ''' Creates background worker thread for checking run status and filling example comparisons when ready.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub CreateBackgroundWorker()
        bw1.WorkerReportsProgress = True
        bw1.WorkerSupportsCancellation = True
        AddHandler bw1.DoWork, AddressOf bw1_DoWork
        AddHandler bw1.ProgressChanged, AddressOf bw1_ProgressChanged
        AddHandler bw1.RunWorkerCompleted, AddressOf bw1_RunWorkerCompleted
    End Sub

    ''' <summary>
    ''' Initialize the object that the background worker calls (if any) and starts the asynchronous operation.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub StartThread()
        ' This method runs on the main thread. 
        bw1 = New BackgroundWorker

        ' Creates background worker thread for checking run status and filling example comparisons when ready
        CreateBackgroundWorker()

        ' Initialize the object that the background worker calls. 

        ' Start the asynchronous operation.
        bw1.RunWorkerAsync()    '(object)

        'Note: For debugging, uncomment 'finished' msgbox in bw1_RunWorkerCompleted to see when each thread ends
    End Sub

#End Region

#Region "Methods: Background Worker"
    '=== The following functions are needed for handling the threads in the form
    ''' <summary>
    ''' Operations done by worker thread as a background thread.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub bw1_DoWork(ByVal sender As Object, ByVal e As DoWorkEventArgs)
        ' This event handler is where the actual work is done. 
        ' This method runs on the background thread. 

        ' Get the BackgroundWorker object that raised this event.
        Dim worker As BackgroundWorker = CType(sender, BackgroundWorker)

        RunRegTestSync()

        'Upon loop completion, stops all related threads and closes form
        'Tells CSiTester to stop comparing examples
        myCsiTester.checkRunOngoing = False

        'End thread operations
        bw1.CancelAsync()
        CloseForm_ThreadSafe()
    End Sub

    ''' <summary>
    ''' Updates thread progress data on the main thread.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>Threadsafe and delegate functions are not necessary for form items affected by this function, as it runs on the main thread</remarks>
    Private Sub bw1_ProgressChanged(ByVal sender As Object, ByVal e As ProgressChangedEventArgs)
        ' This method runs on the main thread. 

        ' Update the progress bar
        ProgressBar1.Value = e.ProgressPercentage

        'Note: to update other values, a single object must be passed in that contains all of the values

    End Sub

    ''' <summary>
    ''' This event handler is called when the background thread finishes. Displays messages if necessary.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub bw1_RunWorkerCompleted(ByVal sender As Object, ByVal e As RunWorkerCompletedEventArgs)
        ' This event handler is called when the background thread finishes. 
        ' This method runs on the main thread. 

        If e.Error IsNot Nothing Then
            'TODO: myLogger
            RaiseEvent Messenger(New MessengerEventArgs(New MessageDetails(), "Error: " & e.Error.Message))
        ElseIf e.Cancelled Then
            'TODO: myLogger
            'Doesn't really appear based on how this is coded
            RaiseEvent Messenger(New MessengerEventArgs(New MessageDetails(), "Check canceled."))
        Else
            'MessageBox.Show("Finished process.")
            If Not canceled Then FinishRunProcedures()
        End If
    End Sub

#End Region

#Region "Methods Threadsafe"
    '==== The following subs are needed in order to make changes to the form without having thread conflict issues
    Private Delegate Sub SetTextBlockText_Delegate(ByVal myTextBlock As TextBlock, ByVal myText As String)
    ''' <summary>
    ''' Updates the textblock in the form.
    ''' </summary>
    ''' <param name="myTextBlock">Name of the textblock to update.</param>
    ''' <param name="myText">Text to assign to the textblock.</param>
    ''' <remarks></remarks>
    Private Sub SetTextBlockText_ThreadSafe(ByVal myTextBlock As TextBlock, ByVal myText As String)
        ' CheckAccess compares the thread ID of the calling thread to the thread ID of the creating thread.
        ' If these threads are the same, it returns true.
        If myTextBlock.Dispatcher.CheckAccess Then
            myTextBlock.Text = myText
        Else                                        'Threads are the different, so threadsafe procedure needed
            Dim myDelegate As New SetTextBlockText_Delegate(AddressOf SetTextBlockText_ThreadSafe)
            myTextBlock.Dispatcher.Invoke(myDelegate, New Object() {myTextBlock, myText})
        End If
    End Sub

    Private Delegate Sub SetLabel_Delegate(ByVal myLabel As Label, ByVal myText As String)
    ''' <summary>
    ''' Updates the label in the form.
    ''' </summary>
    ''' <param name="myLabel">Name of the label to update.</param>
    ''' <param name="myText">Text to assign to the textblock.</param>
    ''' <remarks></remarks>
    Private Sub SetLabelText_ThreadSafe(ByVal myLabel As Label, ByVal myText As String)
        ' CheckAccess compares the thread ID of the calling thread to the thread ID of the creating thread.
        ' If these threads are the same, it returns true.
        If myLabel.Dispatcher.CheckAccess Then
            myLabel.Content = myText
        Else                                        'Threads are the different, so threadsafe procedure needed
            Dim myDelegate As New SetLabel_Delegate(AddressOf SetLabelText_ThreadSafe)
            myLabel.Dispatcher.Invoke(myDelegate, New Object() {myLabel, myText})
        End If
    End Sub

    Private Delegate Sub SetScrollViewPosition_Delegate(ByVal myScrollViewer As ScrollViewer)
    ''' <summary>
    ''' Sets the scrollview position to be set at the bottome each time the form is refreshed.
    ''' </summary>
    ''' <param name="myScrollViewer">Name of the scrollview object to be manipulated.</param>
    ''' <remarks></remarks>
    Private Sub SetScrollViewPosition_ThreadSafe(ByVal myScrollViewer As ScrollViewer)
        ' CheckAccess compares the thread ID of the calling thread to the thread ID of the creating thread.
        ' If these threads are the same, it returns true.
        If myScrollViewer.Dispatcher.CheckAccess Then
            myScrollViewer.ScrollToEnd()
        Else                                        'Threads are the different, so threadsafe procedure needed
            Dim myDelegate As New SetScrollViewPosition_Delegate(AddressOf SetScrollViewPosition_ThreadSafe)
            myScrollViewer.Dispatcher.Invoke(myDelegate, New Object() {myScrollViewer})
        End If
    End Sub

    Private Delegate Sub CloseForm_Delegate()
    ''' <summary>
    ''' Closes the form from a separate thread.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub CloseForm_ThreadSafe()
        ' CheckAccess compares the thread ID of the calling thread to the thread ID of the creating thread.
        ' If these threads are the same, it returns true.
        If Me.Dispatcher.CheckAccess Then
            Me.Close()
        Else                                        'Threads are the different, so threadsafe procedure needed
            Dim myDelegate As New CloseForm_Delegate(AddressOf CloseForm_ThreadSafe)
            Me.Dispatcher.Invoke(myDelegate, New Object() {})
        End If
    End Sub
#End Region

#Region "Methods: Supporting"
    ''' <summary>
    ''' Runs the syncing operation of updating examples and ending the operation and status form when RegTest finished.
    ''' </summary>
    ''' <param name="myInterval">Length of time to wait between attempts to update examples.</param>
    ''' <remarks></remarks>
    Private Sub RunRegTestSync(Optional ByVal myInterval As Integer = 1000)
        Dim exampleCounter As Integer = 0
        Dim exampleCountPrev As Integer = 0
        Dim logItemCounter As Integer

        timeInitialization = 0
        canceled = False
        inSync = True
        accumulatedModelIDs = New List(Of String)
        logItemCounter = 0
        regtestInitialize = True
        nextModelID = ""
        Try
            'Initial Example Setup
            myCsiTester.GetNextExample(exampleCounter, nextModelID)
            SetLabelText_ThreadSafe(lblCurrentExample, "Initialization . . .")

            Do While myCsiTester.checkRunOngoing
                'Update time data
                UpdateTimes()

                'Check log XML for running status.
                If myRegTest.SetRegTestLog Then
                    inSync = False
                    While Not inSync
                        'Check control XML to see if next example is ready. If it is, update that particular example with its results XML
                        TryExampleUpdate(myRegTest.control_xml_file.path, exampleCounter, exampleCountPrev)

                        'Check regtest_log.xml to determine if the test is still running, and to update the status message
                        UpdateStatusMessage(myRegTest.regtest_log.path, logItemCounter)

                        'In case the example counter has overshot the max allowed
                        If exampleCounter > myCsiTester.exampleRunIDs.Count - 1 Then Exit While
                    End While
                End If

                'Check if RegTest is having any problems
                CheckRegTestError(myRegTest.regtest_log.path)

                System.Threading.Thread.Sleep(myInterval)
            Loop

            'Confirm that all examples have been checked
            If myCsiTester.exampleRunNumLatest < myRegTest.model_id.Count Then
                TryExampleUpdate(myRegTest.control_xml_file.path, exampleCounter, exampleCountPrev)
            End If

            'Remove 'Running' status
            myCsiTester.ResetRunStatus()

        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub

    ''' <summary>
    ''' Attempts to update an example. 
    ''' If successful, the syncing of examples between regTest and CSiTester is checked. 
    ''' If examples are out of sync, CSiTester will catch up with updating examples until the programs are back in sync.
    ''' </summary>
    ''' <param name="pathControl">Path to the control xml file that is read.</param>
    ''' <param name="exampleCounter">Index number of the next example to be updated.</param>
    ''' <param name="exampleCountPrev">Index number of the last example updated.</param>
    ''' <remarks></remarks>
    Private Sub TryExampleUpdate(ByVal pathControl As String, ByRef exampleCounter As Integer, ByRef exampleCountPrev As Integer)
        Dim exampleFinished As Boolean = False
        Dim lastAccumulatedModelID As String
        Dim examplesSynced As Boolean
        Dim j As Integer

        inSync = True

        Try
            HandleMissingFile(pathControl)
            If WaitUntilFileAvailable(pathControl, , , True) Then
                HandleMissingFile(pathControl)

                'Update counter number, control.xml file, and update the last run example from the regTest run
                exampleCountPrev = exampleCounter
                If _xmlReaderWriter.InitializeXML(pathControl) Then
                    exampleFinished = myCsiTester.UpdateExample(exampleCounter, False)
                    _xmlReaderWriter.CloseXML()
                End If

                'Check if at end of example list to run
                If exampleCounter = myCsiTester.exampleRunIDs.Count Then Exit Sub

                'Get example for next iteration and update the label on the status form
                myCsiTester.GetNextExample(exampleCounter, nextModelID)
                If Not regtestInitialize Then SetLabelText_ThreadSafe(lblCurrentExample, myCsiTester.currentExampleCheckName & " . . .")
                examplesSynced = True

                'Check if the next model ID is the last one in the list of models that regTest has run
                If accumulatedModelIDs.Count > 1 Then
                    'Get the last model id in the list
                    lastAccumulatedModelID = accumulatedModelIDs(accumulatedModelIDs.Count - 1)

                    'If the last model id is the closing value of 0, set this to the last non-zero model id, if one exists
                    j = 1
                    While lastAccumulatedModelID = "0"
                        If Not j + 1 = accumulatedModelIDs.Count Then
                            lastAccumulatedModelID = accumulatedModelIDs(accumulatedModelIDs.Count - (j + 1))
                            j += 1
                        Else
                            Exit While
                        End If
                    End While

                    'Check if the items are in sync. If not, change the variable back to continue iterating updates
                    If Not lastAccumulatedModelID = nextModelID Then
                        'Check whether the last accumulated model ID occurs before or after the next expected model ID
                        For i = 1 To accumulatedModelIDs.Count - 1
                            If accumulatedModelIDs(i) = nextModelID Then                                                            'regTest is ahead
                                If (i < accumulatedModelIDs.Count - 1 AndAlso accumulatedModelIDs(i + 1) = nextModelID) Then        'regTest has compared the next example 
                                    examplesSynced = False
                                    inSync = False
                                End If
                                Exit For
                            ElseIf accumulatedModelIDs(i) = lastAccumulatedModelID Then                                             'CSiTester is ahead
                                Exit For
                            End If
                        Next
                    End If
                End If

                'Update Control File
                If (exampleCounter > exampleCountPrev AndAlso inSync) Then
                    ResetControl()
                End If
            Else
                HandleMissingFile(pathControl)
            End If
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub

    ''' <summary>
    ''' Check regtest_log.xml to determine if the test is still running, and to update the status message.
    ''' </summary>
    ''' <param name="pathLog">Path to the log file to check.</param>
    ''' <param name="logItemCounter">Log item number, which is updated within the call to the status message in this routine.</param>
    ''' <remarks></remarks>
    Private Sub UpdateStatusMessage(ByVal pathLog As String, ByRef logItemCounter As Integer)
        Dim pathNode As String
        Dim xmlCSI As New cXMLCSi
        Try
            HandleMissingFile(pathLog)
            If WaitUntilFileAvailable(pathLog, , , True) Then
                HandleMissingFile(pathLog)
                If _xmlReaderWriter.InitializeXML(pathLog, True) Then
                    'If regtest is no longer running, stop checking and cancel all related operations
                    pathNode = "//n:status/n:value"

                    If Not regTestStart Then
                        HandleMissingFile(pathLog)
                        If StringsMatch(_xmlReaderWriter.ReadNodeText(pathNode), GetEnumDescription(eResultRun.running)) Then
                            regTestStart = True
                        End If

                        'Get current list of models run so far in regTest
                        accumulatedModelIDs = New List(Of String)
                        accumulatedModelIDs = xmlCSI.UpdateUniqueModelIDList()
                    Else
                        If (inSync AndAlso Not ProcessIsRunning(PROCESS_REGTEST)) Then
                            myCsiTester.checkRunOngoing = False
                            _xmlReaderWriter.CloseXML()
                            CloseForm_ThreadSafe()
                            Exit Sub
                        End If

                        'Get current list of models run so far in regTest
                        HandleMissingFile(pathLog)
                        accumulatedModelIDs = xmlCSI.UpdateUniqueModelIDList()

                        'Update status message
                        HandleMissingFile(pathLog)
                        UpdateStatusMessageContent(logItemCounter)
                    End If
                    _xmlReaderWriter.CloseXML()
                End If
            Else
                HandleMissingFile(pathLog)
            End If
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub

    ''' <summary>
    ''' Produces final actions for the test, such as created failed test sets, updating values, showing the summary form.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub FinishRunProcedures()
        'Populate extra properties for test set
        With myCsiTester
            With .failedExamplesTestSet
                .timeStarted = timeStart
                .timeCompleted = timeCurrent
                .timeElapsed = timeElapsed
            End With

            'Create test sets
            .CreateTestSetFailed(.failedExamplesTestSet)
        End With

        Dim checkResultsSummary As New frmCheckResultsSummary(myCsiTester.failedExamplesTestSet)
        checkResultsSummary.ShowDialog()

        'Automatically close the summary form if in automated testing
        If e2eTestingRunning Then checkResultsSummary.TestFctnOKClick()
    End Sub

    '=== Updating Routines
    ''' <summary>
    ''' Updates time properties for status display and progress bar.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub UpdateTimes()
        Try
            'Update time numerical properties and status bar
            timeCurrentNum = DateTime.Now.Second / 60 + DateTime.Now.Minute + DateTime.Now.Hour * 60
            timeElapsedNum = timeCurrentNum - timeStartNum

            'Update time string properties
            timeCurrent = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss")

            timeElapsed = ConvertTimesStringMinutes(timeElapsedNum)
            If regtestInitialize Then
                timeInitialization = timeElapsedNum
                timeRemaining = "TBD"
            Else
                timeRemaining = ConvertTimesStringMinutes(myCsiTester.estimatedTotalCheckTimeNum - timeElapsedNum + timeInitialization)
            End If



            If CDbl(myCsiTester.estimatedTotalCheckTimeNum - timeElapsedNum + timeInitialization) < 0 Then timeRemaining = "Unknown. Estimate exceeded."

            'Update form using threadsafe functions
            'Update Time Labels
            SetLabelText_ThreadSafe(lblTimeElapsed, timeElapsed)
            SetLabelText_ThreadSafe(lblTimeRemaining, timeRemaining)

            'Update Status Bar
            If (timeElapsedNum >= 0 AndAlso IsNumeric(myCsiTester.estimatedTotalCheckTimeNum) AndAlso Not regtestInitialize) Then
                If myCsiTester.estimatedTotalCheckTimeNum + timeInitialization > 0 Then
                    bw1.ReportProgress(myCInt(CStr((timeElapsedNum / (myCsiTester.estimatedTotalCheckTimeNum + timeInitialization)) * 100)))
                Else
                    bw1.ReportProgress(0)
                End If
            End If

        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub

    ''' <summary>
    ''' Updates the status message from regtest_log.xml.
    ''' </summary>
    ''' <param name="p_logItemCounter">Item number in the regTest status log. This is used to keep track of which row to read.</param>
    ''' <remarks></remarks>
    Private Sub UpdateStatusMessageContent(ByRef p_logItemCounter As Integer)
        Dim pathNode As String
        Dim numberChildNodes As Integer
        Dim statusDateTime As String
        Dim statusCategory As String
        Dim statusLine As String
        Dim statusLineChanged As Boolean = False

        Try
            If ProcessIsRunning(PROCESS_REGTEST) Then
                pathNode = "//n:items"
                numberChildNodes = _xmlReaderWriter.ChildCount(pathNode)
                If numberChildNodes > 0 Then
                    'Update message for all additional items created since last check of the log file
                    While numberChildNodes > p_logItemCounter
                        p_logItemCounter += 1
                        statusDateTime = _xmlReaderWriter.ReadChildText(pathNode, p_logItemCounter - 1, 1)     'Date & Time node is #1 on the 0-based index of 'item' node
                        statusCategory = _xmlReaderWriter.ReadChildText(pathNode, p_logItemCounter - 1, 2)     'Category node is #2 on the 0-based index of 'item' node
                        statusLine = _xmlReaderWriter.ReadChildText(pathNode, p_logItemCounter - 1, 4)     'Message node is #4 on the 0-based index of 'item' node

                        'Adjust status line based on content
                        If Not statusCategory = "excel result" Then                     'Filters out Excel Result messages
                            If statusLine = "RegTest run has been initialized." Then
                                statusLine = Environment.NewLine & statusDateTime & Environment.NewLine & statusLine
                            ElseIf statusLine = "*** Validation of regtest XML file succeeded. ***" Then
                                statusLine = Environment.NewLine & statusDateTime & Environment.NewLine & statusLine
                            ElseIf StringExistInName(statusLine, "model id") Then
                                statusLine = Environment.NewLine & statusDateTime & Environment.NewLine & statusLine
                                regtestInitialize = False
                            Else
                                statusLine = "    " & statusLine
                            End If

                            textBoxString = textBoxString & Environment.NewLine & statusLine

                            statusLineChanged = True
                        End If
                    End While
                End If
            End If
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        Finally
            _xmlReaderWriter.CloseXML()

            'If any new items existed, update the textblock in the status form
            If statusLineChanged Then
                SetTextBlockText_ThreadSafe(txtBlck_StatusLog, textBoxString)
                SetScrollViewPosition_ThreadSafe(sv_logOutput)
                statusLineChanged = False
            End If
        End Try

    End Sub

    '=== Routines that write to the control.xml file
    ''' <summary>
    ''' Initializes control file with correct default values.
    ''' </summary>
    ''' <remarks>Method of reverting 'cancel_run' from 'yes' to 'no' for the next run after canceling and after RegTest responds : Always start the process by writing the correct values in the control.xml</remarks>
    Private Sub InitializeControl()
        Dim pathNodeCancel As String = "//n:cancel_run"
        Dim pathNodeUpdate As String = "//n:update_gui"

        If IO.File.Exists(myRegTest.control_xml_file.path) Then
            If WaitUntilFileAvailable(myRegTest.control_xml_file.path) Then
                SyncLock xmlLock
                    If _xmlReaderWriter.InitializeXML(myRegTest.control_xml_file.path) Then
                        _xmlReaderWriter.WriteNodeText("no", pathNodeUpdate)
                        _xmlReaderWriter.WriteNodeText("no", pathNodeCancel)
                        _xmlReaderWriter.SaveXML(myRegTest.control_xml_file.path)
                        _xmlReaderWriter.CloseXML()
                    End If
                End SyncLock
            End If
        Else
            RunFailed(myRegTest.control_xml_file.path)
        End If
    End Sub

    ''' <summary>
    ''' Resets 'update_gui' status after example has been updated.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub ResetControl()
        Dim pathNodeUpdate As String = "//n:update_gui"
        If IO.File.Exists(myRegTest.control_xml_file.path) Then
            If WaitUntilFileAvailable(myRegTest.control_xml_file.path) Then
                SyncLock xmlLock
                    If _xmlReaderWriter.InitializeXML(myRegTest.control_xml_file.path) Then
                        _xmlReaderWriter.WriteNodeText("no", pathNodeUpdate)
                        _xmlReaderWriter.SaveXML(myRegTest.control_xml_file.path)
                        _xmlReaderWriter.CloseXML()
                    End If
                End SyncLock
            End If
        Else
            RunFailed(myRegTest.control_xml_file.path)
        End If
    End Sub

    ''' <summary>
    ''' Cancels regTest and the checking operations.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub CancelControl()
        HandleMissingFile(myRegTest.control_xml_file.path)
        If WaitUntilFileAvailable(myRegTest.control_xml_file.path) Then
            SyncLock xmlLock
                If _xmlReaderWriter.InitializeXML(myRegTest.control_xml_file.path) Then
                    _xmlReaderWriter.WriteNodeText("yes", "//n:cancel_run")
                    _xmlReaderWriter.SaveXML(myRegTest.control_xml_file.path)
                    _xmlReaderWriter.CloseXML()
                End If
            End SyncLock
        End If
        EndProcess(PROCESS_REGTEST)
    End Sub

    '=== Routines that handle file access and errors
    ''' <summary>
    ''' Checks if the specified file exists, and if not, calls the appropriate sub for further action.
    ''' </summary>
    ''' <param name="myPath">Path to the file to check.</param>
    ''' <remarks></remarks>
    Private Sub HandleMissingFile(ByVal myPath As String)
        If Not IO.File.Exists(myPath) Then RunFailed(myPath)
    End Sub

    ''' <summary>
    ''' If the run fails unexpectedly, this function is called to issue a warning, adjust settings accordingly, and exit the thread.
    ''' </summary>
    ''' <param name="myPath">Optional: Path of the file that caused the failure.</param>
    ''' <remarks></remarks>
    Private Sub RunFailed(Optional ByVal myPath As String = "")
        EndProcess(PROCESS_REGTEST)
        RaiseEvent Messenger(New MessengerEventArgs(New MessageDetails(eMessageActionSets.OkOnly, eMessageType.Stop),
                                                    _PROMPT_MISSING_FILE & myPath & _PROMPT_MISSING_FILE_ACTION,
                                                    _TITLE_MISSING_FILE))
        myCsiTester.checkRunOngoing = False
        myCsiTester.checkRunError = True
        CloseForm_ThreadSafe()
    End Sub

    ''' <summary>
    ''' Checks to ensure that regTest is running and responding. If not, regTest is closed (if applicable) and the GUI portion of the run is stopped.
    ''' </summary>
    ''' <param name="p_pathLog">Path to the log file to check.</param>
    ''' <remarks></remarks>
    Private Sub CheckRegTestError(ByVal p_pathLog As String)
        Dim waitForProcess As Boolean = True
        Dim regTestCompleted As Boolean = False

        Try
            'Check if regTest is running.
            If ProcessIsRunning(PROCESS_REGTEST) Then
                'Check if regTest is responsive. If not, kill it.
                If Not ProcessIsResponding(PROCESS_REGTEST) Then
                    While waitForProcess
                        Select Case MessengerPrompt.Prompt(New MessageDetails(eMessageActionSets.YesNo, eMessageType.Error),
                                            _PROMPT_REGTEST_ERROR,
                                            _TITLE_REGTEST_ERROR)
                            Case eMessageActions.Yes
                                EndProcess(PROCESS_REGTEST)
                                waitForProcess = False
                                myCsiTester.checkRunOngoing = False
                                myCsiTester.regTestFail = True
                                CloseForm_ThreadSafe()
                            Case eMessageActions.No
                                System.Threading.Thread.Sleep(30000)
                        End Select
                    End While
                End If
            Else    'RegTest is no longer running
                If Not regTestStart Then                      'Regtest has not started yet, try checking a few times with delays
                    System.Threading.Thread.Sleep(1000)
                    If Not ProcessIsRunning(PROCESS_REGTEST) Then
                        System.Threading.Thread.Sleep(2000)
                        If Not ProcessIsRunning(PROCESS_REGTEST) Then
                            System.Threading.Thread.Sleep(5000)
                            RaiseEvent Messenger(New MessengerEventArgs(New MessageDetails(eMessageActionSets.OkOnly, eMessageType.Error),
                                                                        _PROMPT_REGTEST_NOT_RUNNING,
                                                                        _TITLE_REGTEST_ERROR))
                            myCsiTester.checkRunOngoing = False
                            myCsiTester.regTestFail = True
                            CloseForm_ThreadSafe()
                        End If
                    End If
                Else
                    'Check if regTest has finished running
                    HandleMissingFile(p_pathLog)
                    If WaitUntilFileAvailable(p_pathLog, , , True) Then
                        HandleMissingFile(p_pathLog)
                        If _xmlReaderWriter.InitializeXML(p_pathLog, True) Then
                            'If regtest is no longer running, stop checking and cancel all related operations
                            HandleMissingFile(p_pathLog)
                            If StringsMatch(_xmlReaderWriter.ReadNodeText("//n:status/n:value"), GetEnumDescription(eResultRun.completed)) Then regTestCompleted = True
                            _xmlReaderWriter.CloseXML()
                        End If
                    End If

                    If Not regTestCompleted Then
                        RaiseEvent Messenger(New MessengerEventArgs(New MessageDetails(eMessageActionSets.OkOnly, eMessageType.Error),
                                                                    _PROMPT_REGTEST_NOT_RUNNING,
                                                                    _TITLE_REGTEST_ERROR))
                    End If

                    myCsiTester.checkRunOngoing = False
                    myCsiTester.regTestFail = True
                    CloseForm_ThreadSafe()
                End If
            End If
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub
#End Region

#Region "Form Controls"
    ''' <summary>
    ''' Cancels all regtest functions and form threads. Closes form.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub btnCancel_Click(sender As Object, e As RoutedEventArgs) Handles btnCancel.Click
        Try
            ' Cancel the asynchronous operation. 
            If bw1.WorkerSupportsCancellation = True Then
                bw1.CancelAsync()
            End If

            'Tells CSiTester to stop comparing examples
            myCsiTester.checkRunOngoing = False
            canceled = True

            'Remove 'Running' status
            myCsiTester.ResetRunStatus()

            'Tells RegTest to cancel the next example
            If WaitUntilFileAvailable(myRegTest.control_xml_file.path) Then
                CancelControl()
            Else
                'TODO
                'If Not suppressExStates Then
                '    'myLogger
                '    MsgBox(ex.Message)
                '    MsgBox(ex.StackTrace)
                'End If
            End If

            'Once regTest is stopped, close status form
            FinishRunProcedures()
            Me.Close()
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub
#End Region

#Region "Test Components"
    ''' <summary>
    ''' Used for automated testing. Cancels the form by 'clicking' the OK button.
    ''' </summary>
    ''' <remarks></remarks>
    Friend Sub TestFctnCancelCheck()
        e2eTester.ButtonClick(btnCancel)
    End Sub
#End Region

End Class
