Option Explicit On
Option Strict On

Imports System.ComponentModel
Imports System.Collections.ObjectModel

Imports CSiTester.cKeywords
Imports CSiTester.cKeywordTags

Imports MPT.FileSystem.PathLibrary
Imports MPT.Lists.ListLibrary
Imports MPT.Reporting

Public Class frmMCKeywords
    Implements INotifyPropertyChanged
    Implements ILoggerEvent
    Public Event Log(exception As LoggerEventArgs) Implements ILoggerEvent.Log
    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

#Region "Constants"
    Private Const _colHeaderCustom As String = "Custom Keywords"
    Private Const _colHeaderStandard As String = "Standard Keywords"
    Private Const _colHeaderAuto As String = "Auto Keywords"
    Private Const _colHeaderWarning As String = "Warning Keywords"
#End Region

#Region "Variables"
    Private _keywordsStandardInitial As New ObservableCollection(Of String)
    Private _keywordsWarningInitial As New ObservableCollection(Of String)
    Private _keywordsAutoInitial As New ObservableCollection(Of String)
    Private _keywordsCustomInitial As New ObservableCollection(Of String)
#End Region

#Region "Properties"
    Private _keywordsCustom As New ObservableCollection(Of cDGEntry)
    Friend Property keywordsCustom As ObservableCollection(Of cDGEntry)
        Set(ByVal value As ObservableCollection(Of cDGEntry))
            _keywordsCustom = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("keywordsCustom"))
        End Set
        Get
            Return _keywordsCustom
        End Get
    End Property

    Private _keywordsStandard As New ObservableCollection(Of cDGEntry)
    Friend Property keywordsStandard As ObservableCollection(Of cDGEntry)
        Set(ByVal value As ObservableCollection(Of cDGEntry))
            _keywordsStandard = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("keywordsStandard"))
        End Set
        Get
            Return _keywordsStandard
        End Get
    End Property

    Private _keywordsWarning As New ObservableCollection(Of cDGEntry)
    Friend Property keywordsWarning As ObservableCollection(Of cDGEntry)
        Set(ByVal value As ObservableCollection(Of cDGEntry))
            _keywordsWarning = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("keywordsWarning"))
        End Set
        Get
            Return _keywordsWarning
        End Get
    End Property

    Private _keywordsAuto As New ObservableCollection(Of cDGEntry)
    Friend Property keywordsAuto As ObservableCollection(Of cDGEntry)
        Set(ByVal value As ObservableCollection(Of cDGEntry))
            _keywordsAuto = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("keywordsAuto"))
        End Set
        Get
            Return _keywordsAuto
        End Get
    End Property

    Friend Property ttKeywordsStandard As String
    Public Property keywordsStandardList As New ObservableCollection(Of cDGEntry)
    Friend Property ttKeywordsWarning As String
    Public Property keywordsWarningList As New ObservableCollection(Of cDGEntry)
    Friend Property ttKeywordsAuto As String
    Friend Property ttKeywordsCustom As String

    Friend Property keywordsSave As New cKeywords

#End Region

#Region "Initialization"

    ''' <summary>
    ''' Initializes the keywords form for editing the keywords list provided.
    ''' </summary>
    ''' <param name="p_keywordsList">List of keywords associated with a given MC file or example.</param>
    ''' <remarks></remarks>
    Friend Sub New(ByRef p_keywordsList As cKeywords)
        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
        'InitializeData()

        keywordsSave = p_keywordsList

        ParseKeywords(p_keywordsList.NamesToObservableCollection())
        InitializeComboBoxData()

        ttKeywordsStandard = InitializeHeaderTooltips(KEYWORD_GROUP_STANDARD)
        keywordsStandard = InitializeDGClass(_keywordsStandardInitial, _colHeaderStandard)
        dg_keywordsStandard.ItemsSource = keywordsStandard

        ttKeywordsWarning = InitializeHeaderTooltips(KEYWORD_GROUP_WARNING)
        keywordsWarning = InitializeDGClass(_keywordsWarningInitial, _colHeaderWarning, TAG_KEYWORD_WARNING)
        dg_keywordsWarning.ItemsSource = keywordsWarning

        ttKeywordsAuto = "Keywords automatically generated by CSiTester."
        keywordsAuto = InitializeDGClass(_keywordsAutoInitial, _colHeaderAuto)
        dg_keywordsAuto.ItemsSource = keywordsAuto

        ttKeywordsCustom = "User-defined keywords."
        keywordsCustom = InitializeDGClass(_keywordsCustomInitial, _colHeaderCustom)
        dg_keywordsCustom.ItemsSource = keywordsCustom

        SetComboBoxSelections()
    End Sub

    Private Sub SetComboBoxSelections()
        For Each warningKeyword As cDGEntry In keywordsWarning
            warningKeyword.selectedEntry = warningKeyword.rowEntry
        Next

        For Each standardKeyword As cDGEntry In keywordsStandard
            standardKeyword.selectedEntry = standardKeyword.rowEntry
        Next

    End Sub

    Private Sub InitializeData()
        _keywordsStandardInitial = New ObservableCollection(Of String)
        _keywordsWarningInitial = New ObservableCollection(Of String)
        _keywordsAutoInitial = New ObservableCollection(Of String)
        _keywordsCustomInitial = New ObservableCollection(Of String)

        keywordsCustom = New ObservableCollection(Of cDGEntry)
        keywordsStandard = New ObservableCollection(Of cDGEntry)
        keywordsWarning = New ObservableCollection(Of cDGEntry)
        keywordsAuto = New ObservableCollection(Of cDGEntry)

        keywordsStandardList = New ObservableCollection(Of cDGEntry)
        keywordsWarningList = New ObservableCollection(Of cDGEntry)
    End Sub

    Private Sub InitializeComboBoxData()
        Try
            For Each keywordGroup As cKeywordsManager In testerSettings.exampleKeywords
                If StringExistInName(keywordGroup.name, KEYWORD_GROUP_WARNING) Then
                    For Each keyword As cKeyword In keywordGroup.keywords
                        Dim dgEntry As New cDGEntry
                        dgEntry.columnHeader = _colHeaderWarning
                        dgEntry.rowEntry = keyword.name
                        keywordsWarningList.Add(dgEntry)
                    Next
                    'TODO: Sort list alphabetically
                ElseIf StringExistInName(keywordGroup.name, KEYWORD_GROUP_STANDARD) Then
                    For Each keyword As cKeyword In keywordGroup.keywords
                        Dim dgEntry As New cDGEntry
                        dgEntry.columnHeader = _colHeaderStandard
                        dgEntry.rowEntry = keyword.name
                        keywordsStandardList.Add(dgEntry)
                    Next
                    'TODO: Sort list alphabetically
                End If
            Next
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub

#End Region

#Region "Form Controls"
    Private Sub btnSave_Click(sender As Object, e As RoutedEventArgs) Handles btnSave.Click
        keywordsSave.Replace(WriteKeywordLists())

        Me.Close()
    End Sub
    Private Sub btnClose_Click(sender As Object, e As RoutedEventArgs) Handles btnClose.Click
        Me.Close()
    End Sub
#End Region

    ''' <summary>
    ''' Combines the current lists of keyword entries into a single list of keyword strings.
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function WriteKeywordLists() As ObservableCollection(Of String)
        Dim keywordTempList As New ObservableCollection(Of String)
        Dim keywordList As New ObservableCollection(Of String)

        Try
            keywordList = CombineLists(WriteKeywordList(keywordsCustom), keywordList)

            keywordList = CombineLists(WriteKeywordList(keywordsStandard), keywordList)

            keywordList = CombineLists(WriteKeywordList(keywordsWarning, TAG_KEYWORD_WARNING), keywordList)

            keywordList = CombineLists(WriteKeywordList(keywordsAuto), keywordList)

            keywordList = ConvertToUniqueList(keywordList)
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try

        Return keywordList
    End Function

#Region "Form Behavior"
    '=== Dynamically sets the maximum height of the datagrid so that scrollbars appear if not all rows are visible
    ''' <summary>
    ''' Dynamically sets the maximum height of the datagrid so that scrollbars appear if the window is made too small to display all rows
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub gridMain_SizeChanged(sender As Object, e As SizeChangedEventArgs) Handles gridMain.SizeChanged
        dg_keywordsStandard.MaxHeight = rowDG.ActualHeight - dg_keywordsStandard.Margin.Bottom - gridMain.Margin.Bottom - brdr_DG.BorderThickness.Bottom
        dg_keywordsCustom.MaxHeight = rowDG.ActualHeight - dg_keywordsCustom.Margin.Bottom - gridMain.Margin.Bottom - brdr_DG.BorderThickness.Bottom
        dg_keywordsWarning.MaxHeight = rowDG.ActualHeight - dg_keywordsWarning.Margin.Bottom - gridMain.Margin.Bottom - brdr_DG.BorderThickness.Bottom
    End Sub
#End Region

#Region "Methods"
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Private Function InitializeDGClass(ByVal p_keywordGroup As ObservableCollection(Of String),
                                         ByVal p_columnHeader As String,
                                         Optional ByVal p_tag As String = "") As ObservableCollection(Of cDGEntry)
        Dim keywordsDGList As New ObservableCollection(Of cDGEntry)

        For Each entry As String In p_keywordGroup
            Dim dgEntry As New cDGEntry
            dgEntry.columnHeader = p_columnHeader
            If Not String.IsNullOrEmpty(p_tag) Then
                dgEntry.rowEntry = FilterStringFromName(entry, p_tag, False, True)
            Else
                dgEntry.rowEntry = entry
            End If

            keywordsDGList.Add(dgEntry)
        Next

        Return keywordsDGList
    End Function

    Private Function InitializeHeaderTooltips(ByVal p_keywordGroupName As String) As String
        For Each keywordGroup As cKeywordsManager In testerSettings.exampleKeywords
            If keywordGroup.name = p_keywordGroupName Then
                Return keywordGroup.description
            End If
        Next
        Return ""
    End Function

    Private Function InitializeComboTooltips(ByVal p_keywordGroupName As String) As List(Of String)
        Dim tooltips As New List(Of String)

        For Each keywordGroup As cKeywordsManager In testerSettings.exampleKeywords
            If keywordGroup.name = p_keywordGroupName Then
                For Each keyword As cKeyword In keywordGroup.keywords
                    tooltips.Add(keyword.description)
                Next
            End If
        Next

        Return tooltips
    End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub ParseKeywords(ByVal p_keywordsList As ObservableCollection(Of String))

        For Each keyword As String In p_keywordsList
            Dim keywordAdded As Boolean = False

            If StringExistInName(keyword, TAG_KEYWORD_WARNING) Then
                _keywordsWarningInitial.Add(keyword)
                keywordAdded = True
            Else
                keywordAdded = ParseKeywordsStandard(keyword)
            End If

            If Not keywordAdded Then
                For Each keywordGroup As cKeywordsManager In testerSettings.exampleKeywords
                    If (StringExistInName(keyword, keywordGroup.prefix) AndAlso
                        Not StringExistInName(keyword, TAG_KEYWORD_WARNING)) Then
                        _keywordsAutoInitial.Add(keyword)
                        keywordAdded = True
                        Exit For
                    End If
                Next
            End If

            If Not keywordAdded Then _keywordsCustomInitial.Add(keyword)
        Next
    End Sub

    Private Function ParseKeywordsStandard(ByVal p_keyword As String) As Boolean
        For Each keywordGroup As cKeywordsManager In testerSettings.exampleKeywords
            If keywordGroup.name = KEYWORD_GROUP_STANDARD Then
                For Each keyword As cKeyword In keywordGroup.keywords
                    If p_keyword = keyword.name Then
                        _keywordsStandardInitial.Add(p_keyword)
                        Return True
                    End If
                Next
            End If
        Next

        Return False
    End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <remarks></remarks>
    Private Function WriteKeywordList(ByVal p_entries As ObservableCollection(Of cDGEntry),
                                      Optional p_tag As String = "") As ObservableCollection(Of String)
        Dim keywordList As New ObservableCollection(Of String)

        For Each entry As cDGEntry In p_entries
            Dim value As String
            If entry.selectedEntry Is Nothing Then
                value = entry.rowEntry
            Else
                value = entry.selectedEntry
            End If

            If p_tag IsNot Nothing Then value = p_tag & value

            keywordList.Add(value)
        Next

        Return keywordList
    End Function

#End Region
End Class
