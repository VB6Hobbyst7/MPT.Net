Option Strict On
Option Explicit On

Imports System.Data
Imports System.ComponentModel
Imports System.Windows.Controls.Primitives

Imports MPT.Forms.FormsLibrary
Imports MPT.Forms.DataGridLibrary
Imports MPT.Reporting
Imports MPT.String.ConversionLibrary

Imports CSiTester.cTableQueryView


''' <summary>
''' Displays a form that shows a summary of the total result object associated with an example. 
''' The view is modeless and updates lives based on edits in the form for creating example results.
''' This form can also clear all incomplete results.
''' </summary>
''' <remarks></remarks>
Public Class frmXMLObjectResultsSummary
    Implements INotifyPropertyChanged
    Implements ILoggerEvent
    Public Event Log(exception As LoggerEventArgs) Implements ILoggerEvent.Log
    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

#Region "Variables"
    ''' <summary>
    ''' List of X- &amp; Y- coordinates for the top-left and bottom-right corners of the DataGrid area that contains the cells.
    ''' Accounts for headers &amp; scrollbars.
    ''' </summary>
    ''' <remarks></remarks>
    Private _activeDataGridArea As List(Of Point)

       ''' <summary>
    ''' Calculated maximum width to allow for the form. Not necessarily assigned to the form size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _maxWidthForm As Double
    ''' <summary>
    ''' Calculated maximum height to allow for the form. Not necessarily assigned to the form size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _maxHeightForm As Double
    ''' <summary>
    ''' Calculated minimum width to allow for the form. Not necessarily assigned to the form size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _minWidthForm As Double
    ''' <summary>
    ''' Calculated minimum height to allow for the form. Not necessarily assigned to the form size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _minHeightForm As Double

    ''' <summary>
    ''' Calculated minimum width to allow for the DataGrid. Not necessarily assigned to the DataGrid size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _minWidthDG As Double
    ''' <summary>
    ''' Calculated minimum height to allow for the DataGrid. Not necessarily assigned to the DataGrid size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _minHeightDG As Double
    ''' <summary>
    ''' Calculated maximum width to allow for the DataGrid. Not necessarily assigned to the DataGrid size property.
    ''' </summary>
    ''' <remarks></remarks>
    Private _maxWidthDG As Double

    ''' <summary>
    ''' If 'True', then the form has had its size limitations manually set and cannot be reset. If 'False', the form's size limitations can be set/reset.
    ''' </summary>
    ''' <remarks></remarks>
    Private _formSized As Boolean
#End Region

#Region "Properties: Friend"
    Private WithEvents _incompleteResults As cTableQueryViewSummary
    ''' <summary>
    ''' List of the result objects that have not been completed.
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Friend ReadOnly Property incompleteResults As cTableQueryViewSummary
        Get
            Return _incompleteResults
        End Get
    End Property
#End Region

#Region "Initialization"
    Friend Sub New()

        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
        InitializeData()
    End Sub

    Friend Sub New(ByRef p_resultSummary As cTableQueries)

        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
        InitializeData()
        UpdateForm(p_resultSummary)

        If incompleteResults.summaryResultsTable.Rows.Count = 0 Then Exit Sub

    End Sub

    Private Sub InitializeData()
        _activeDataGridArea = New List(Of Point)
    End Sub

    ''' <summary>
    ''' Gets the minimum top-left coordinate and maximum bottom-right coordinate of the cells in the DataGrid, accounting for headers and the scrollbars.
    ''' </summary>
    ''' <param name="p_dataGrid">DataGrid object to use.</param>
    ''' <remarks></remarks>
    Private Sub SetDataGridCellsExtents(ByVal p_dataGrid As DataGrid)
        _activeDataGridArea.Clear()

        _activeDataGridArea.Add(GetDataGridCellExtentHeaders(p_dataGrid))

        _activeDataGridArea.Add(GetDataGridCellExtentScrollbars(p_dataGrid))
    End Sub

    ''' <summary>
    ''' Assigns column customization to the autogenerated columns, such as styles, and hiding certain columns.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub dgIncompleteResults_AutoGeneratingColumn(sender As Object, e As DataGridAutoGeneratingColumnEventArgs) Handles dgIncompleteResults.AutoGeneratingColumn
        Try
            Dim currentColumn As DataGridTextColumn = CType(e.Column, DataGridTextColumn)
            Dim currentHeader As String = currentColumn.Header.ToString
            Dim cellStatusTagHeader = incompleteResults.GetCellStatusTagHeader(currentHeader)

            SetCompletionStyles(currentColumn, currentHeader)

            If (Not currentHeader = BM_HEADER AndAlso
                Not currentHeader = QUERY_HEADER AndAlso
                Not currentHeader = NAME_HEADER) Then
                currentColumn.Visibility = Windows.Visibility.Collapsed
            End If

        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub

    ''' <summary>
    ''' Sets up the styles for the DataGrid.
    ''' </summary>
    ''' <param name="p_Column">Column object that is to have the style assigned.</param>
    ''' <param name="p_Header">Header that corresponds to the column.</param>
    ''' <remarks></remarks>
    Private Sub SetCompletionStyles(ByRef p_column As DataGridTextColumn,
                                 ByVal p_header As String)
        Dim completionStyle As New Style()
        Dim triggerIncomplete As New DataTrigger()
        Dim triggerComplete As New DataTrigger()
        Dim setterIncomplete As New Setter()
        Dim setterComplete As New Setter()
        Dim setterFontWeightBlack As New Setter()
        Dim setterFontWeightNormal As New Setter()

        Dim cellStatusTagHeader = incompleteResults.GetCellStatusTagHeader(p_header)

        Try

            'Create setters
            With setterIncomplete
                .Property = TextBlock.BackgroundProperty
                .Value = Brushes.Tomato
            End With
            With setterComplete
                .Property = TextBlock.BackgroundProperty
                .Value = Brushes.Transparent
            End With

            '' Fonts & TextBlock
            With setterFontWeightBlack
                .Property = TextBlock.FontWeightProperty
                .Value = FontWeights.Black
            End With
            With setterFontWeightNormal
                .Property = TextBlock.FontWeightProperty
                .Value = FontWeights.Normal
            End With

            'Create DataTriggers, add setters
            With triggerIncomplete
                .Binding = New Binding(cellStatusTagHeader)
                .Value = "False"
                .Setters.Add(setterIncomplete)
                .Setters.Add(setterFontWeightBlack)
            End With
            With triggerComplete
                .Binding = New Binding(cellStatusTagHeader)
                .Value = "True"
                .Setters.Add(setterComplete)
                .Setters.Add(setterFontWeightNormal)
            End With

            ' Clear the triggers & form style
            With completionStyle
                .Triggers.Clear()
                .Triggers.Add(triggerIncomplete)
                .Triggers.Add(triggerComplete)
                .TargetType = GetType(TextBlock)
            End With

            ' Assign style
            p_column.ElementStyle = completionStyle
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub
#End Region

#Region "Methods: Private - Adding Data & Structure"

#End Region

#Region "Form Behavior"
    ''' <summary>
    ''' All actions to be done whenever the form is closed occur here.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Window_Closing(sender As Object, e As CancelEventArgs)
        windowXMLObjectResults.btnDisplayIncompleteResultsSummary.IsEnabled = True
        windowXMLObjectResults.btnDisplayResultsSummary.IsEnabled = True
    End Sub

    ''' <summary>
    ''' Scrolls to the selected item in the calling form.
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub dgIncompleteResults_SelectedCellsChanged(sender As Object, e As SelectedCellsChangedEventArgs) Handles dgIncompleteResults.SelectedCellsChanged
        Dim selectedRow As DataGridRow = GetSelectedRow(dgIncompleteResults)
        Dim keyQuery As Integer = myCInt(GetValueFromRowAndHeader(selectedRow, KEY_QUERY_HEADER))

        For rowIndex = 0 To windowXMLObjectResults.dgAccessTable.Items.Count
            Dim toSelectRow As DataGridRow = GetRowByIndex(windowXMLObjectResults.dgAccessTable, rowIndex)

            Dim matchKeyQuery As Integer = myCInt(GetValueFromRowAndHeader(toSelectRow, KEY_QUERY_HEADER))

            If matchKeyQuery = keyQuery Then
                windowXMLObjectResults.dgAccessTable.ScrollIntoView(toSelectRow)
                Exit For
            End If
        Next
    End Sub

    '=== Dynamically sets the maximum height of the datagrid so that scrollbars appear if not all rows are visible
    ''' <summary>
    ''' Dynamically sets the maximum height of the datagrid so that scrollbars appear if the window is made too small to display all rows
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub gridMain_SizeChanged(sender As Object, e As SizeChangedEventArgs) Handles gridMain.SizeChanged
        UpdateDataGridHeight(dgIncompleteResults, gridMain, rowDG, brdr_DG)
        CheckFormDimensionLimits()
        SetDataGridCellsExtents(dgIncompleteResults)
    End Sub

    ''' <summary>
    ''' Determines and sets the maximum &amp; minimum dimension limits for the form and DataGrid if they haven't already been set.
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub CheckFormDimensionLimits()
        If Not _formSized Then
            Try
                Dim myScrollViewer As ScrollViewer = FindVisualChild(Of ScrollViewer)(dgIncompleteResults)
                Dim colHeadersPresenter As DataGridColumnHeadersPresenter = FindVisualChild(Of DataGridColumnHeadersPresenter)(dgIncompleteResults)
                Dim rows As New List(Of DataGridRow)

                'Get row object & update layout so that scrollviewer has updated data
                rows.Add(GetRowByIndex(dgIncompleteResults, 0))
                dgIncompleteResults.UpdateLayout()

                If (colHeadersPresenter IsNot Nothing AndAlso rows(0) IsNot Nothing) Then
                    SetDGDimensionsMaxMin(colHeadersPresenter, rows, brdr_DG)
                    _formSized = SetFormDimensionsMaxMin(colHeadersPresenter, rows, myScrollViewer)
                End If

            Catch ex As Exception
                RaiseEvent Log(New LoggerEventArgs(ex))
            End Try
        End If
    End Sub

    ''' <summary>
    ''' Set the maximum &amp; minimum dimension limits for the form.
    ''' </summary>
    ''' <param name="p_colHeadersPresenter">Column headers for DataGrid height.</param>
    ''' <param name="p_scrollViewer">Scrollviewer object to query for the total display width and height.</param>
    ''' <param name="p_rows">Minimum DataGrid row objects set to include, starting from the first row.</param>
    ''' <remarks></remarks>
    Private Function SetFormDimensionsMaxMin(ByVal p_colHeadersPresenter As DataGridColumnHeadersPresenter,
                                        ByVal p_rows As List(Of DataGridRow),
                                        ByVal p_scrollViewer As ScrollViewer) As Boolean
        Dim formSized As Boolean = False
        Dim buttonsWidth As Double = 0
        Dim buttons As New List(Of Button)
        buttons.Add(btnRemoveIncompleteResults)
        buttons.Add(btnClose)

        buttonsWidth = GetButtonWidths(buttons)

        _minHeightForm = GetFormMinHeight()
        _maxHeightForm = GetFormMaxHeight(p_rows, p_colHeadersPresenter, p_scrollViewer)
        _maxWidthForm = Math.Max(buttonsWidth, GetFormMaxWidth(p_scrollViewer)) 'GetFormWidthMinElements(Me, grpBxMain, gridMain) + Math.Max(buttonsWidth, GetFormMaxWidth(p_scrollViewer))
        _minWidthForm = GetFormWidthMinElements(Me, grpBxMain, gridMain) + buttonsWidth



        If (_minHeightForm > 0 AndAlso _maxHeightForm > 0 AndAlso _maxWidthForm > 0 AndAlso _minWidthForm > 0) Then formSized = True

        AssignFormDimensions(Me, _minHeightForm, _minWidthForm, _maxHeightForm, _maxWidthForm, , True)

        Return formSized
    End Function

    ''' <summary>
    ''' Set the maximum &amp; minimum dimension limits for the DataGrid.
    ''' </summary>
    ''' <param name="p_colHeadersPresenter">Column headers for DataGrid height.</param>
    ''' <param name="p_rows">Minimum DataGrid row objects set to include, starting from the first row.</param>
    ''' <param name="p_borders">Borders object surrounding DataGrid to include for dimensions.</param>
    ''' <remarks></remarks>
    Private Sub SetDGDimensionsMaxMin(ByVal p_colHeadersPresenter As DataGridColumnHeadersPresenter,
                                      ByVal p_rows As List(Of DataGridRow),
                                      Optional ByVal p_borders As Border = Nothing)
        Dim buttons As New List(Of Button)
        buttons.Add(btnRemoveIncompleteResults)
        buttons.Add(btnClose)

        _minWidthDG = GetButtonWidths(buttons) - GetDataGridBorderElementsWidth(dgIncompleteResults, brdr_DG)
        _maxWidthDG = CalcDataGridWidthMax(dgIncompleteResults, p_borders)
        _minHeightDG = DataGridHeightMin(dgIncompleteResults, p_colHeadersPresenter, , p_rows)

        ExpandLastColumnToFit(dgIncompleteResults, _minWidthDG, _maxWidthDG)

        AssignDGDimensions(dgIncompleteResults, _minHeightDG, _minWidthDG)
    End Sub

    ''' <summary>
    ''' Get the maximum width to allow for the form.
    ''' </summary>
    ''' <param name="p_scrollViewer">Scrollviewer object to query for the total display width.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetFormMaxWidth(Optional ByVal p_scrollViewer As ScrollViewer = Nothing) As Double
        Dim maxWidth As Double = GetFormWidthMinElements(Me, grpBxMain, gridMain)

        maxWidth += GetDataGridWidthMax(dgIncompleteResults, brdr_DG, p_scrollViewer)

        Return maxWidth
    End Function

    ''' <summary>
    ''' Get the maximum height to allow for the form. 
    ''' If optional parameters are not provided, results will be automatically determined from the form DataGrid object.
    ''' </summary>
    ''' <param name="p_colHeadersPresenter">Column headers for DataGrid height.</param>
    ''' <param name="p_scrollViewer">Scrollviewer object to query for the total display width and height.</param>
    ''' <param name="p_rows">Minimum DataGrid row objects set to include, starting from the first row.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetFormMaxHeight(Optional ByVal p_rows As List(Of DataGridRow) = Nothing,
                                  Optional ByVal p_colHeadersPresenter As DataGridColumnHeadersPresenter = Nothing,
                                  Optional ByVal p_scrollViewer As ScrollViewer = Nothing) As Double
        Dim maxHeight As Double = GetFormHeightMinElements(Me, grpBxMain, gridMain)
        Dim grids As New List(Of RowDefinition)
        grids.Add(BottomGrid)

        maxHeight += GetGridHeights(grids)
        maxHeight += GetDataGridHeightMax(dgIncompleteResults, brdr_DG, p_rows, p_colHeadersPresenter, p_scrollViewer)

        Return maxHeight
    End Function

    ''' <summary>
    ''' Get the minimum height to allow for the form.
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetFormMinHeight() As Double
        Dim minHeight As Double = GetFormHeightMinElements(Me, grpBxMain, gridMain)
        Dim grids As New List(Of RowDefinition)
        grids.Add(BottomGrid)

        minHeight += GetGridHeights(grids)
        minHeight += GetDataGridHeightMin(dgIncompleteResults, brdr_DG, _minHeightDG)

        Return minHeight
    End Function
#End Region

#Region "Form Controls"
    Private Sub btnRemoveIncompleteResults_Click(sender As Object, e As RoutedEventArgs) Handles btnRemoveIncompleteResults.Click
        windowXMLObjectResults.RemoveIncompleteResults()

        If incompleteResults.summaryResultsTable.Rows.Count = 0 Then Me.Close()
    End Sub

    Private Sub btnClose_Click(sender As Object, e As RoutedEventArgs) Handles btnClose.Click
        Me.Close()
    End Sub
#End Region


#Region "Methods: Friend"
    ''' <summary>
    ''' Updates the data that the form DataGrid displays.
    ''' </summary>
    ''' <param name="p_incompleteResults">Class containing all of the results that don't have the minimum complete information.</param>
    ''' <remarks></remarks>
    Friend Sub UpdateForm(ByRef p_incompleteResults As cTableQueries)
        Try
            If p_incompleteResults Is Nothing Then Exit Sub
            If p_incompleteResults.Results.Count = 0 Then
                Me.Close()
                Exit Sub
            End If

            Dim resultsDataTableTemp As cTableQueryViewSummary = New cTableQueryViewSummary(p_incompleteResults)

            If resultsDataTableTemp IsNot Nothing Then _incompleteResults = resultsDataTableTemp
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("incompleteResults"))

            dgIncompleteResults.ItemsSource = _incompleteResults.summaryResultsTable.DefaultView

            SetDataGridCellsExtents(dgIncompleteResults)

            _formSized = False
            CheckFormDimensionLimits()
        Catch ex As Exception
            RaiseEvent Log(New LoggerEventArgs(ex))
        End Try
    End Sub
#End Region

#Region "Methods: Private"

#End Region

End Class
